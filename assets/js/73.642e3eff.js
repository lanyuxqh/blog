(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{634:function(_,v,e){"use strict";e.r(v);var t=e(5),l=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"第-10-章-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#第-10-章-dom"}},[_._v("#")]),_._v(" 第 10 章_DOM")]),_._v(" "),e("p",[_._v("DOM（Document Object Model）：文档对象模型，是针对 HTML 和 XML 文档的一个 API（应用程序编程接口）。")]),_._v(" "),e("h2",{attrs:{id:"_1、节点层次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、节点层次"}},[_._v("#")]),_._v(" 1、节点层次")]),_._v(" "),e("p",[_._v("DOM 描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。")]),_._v(" "),e("p",[_._v("所有页面标记表现为一个以特定节点为根节点的树形结构。")]),_._v(" "),e("p",[_._v("文档节点是每个文档的根节点。")]),_._v(" "),e("p",[_._v("文档元素是文档的最外层元素。每个文档只能有一个文档元素。在 HTML 页面中，文档元素始终都是"),e("code",[_._v("<html>")]),_._v("元素。在 XML 中，没有预定义的元素，因此任何元素都可能成为文档元素。")]),_._v(" "),e("p",[e("strong",[_._v("1.1 Node 类型")])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("JavaScript 中的所有节点类型都继承自 Node 类型，因此所有节点类型都共享着相同的基本属性和方法。")])]),_._v(" "),e("li",[e("p",[_._v("nodeType：表明节点的类型（值为 1-12）")]),_._v(" "),e("ul",[e("li",[_._v("ELEMENT_NODE")]),_._v(" "),e("li",[_._v("ATTRIBUTE_NODE")]),_._v(" "),e("li",[_._v("TEXT_NODE")]),_._v(" "),e("li",[_._v("CDATA_SECTION_NODE")]),_._v(" "),e("li",[_._v("ENTITY_REFERENCE_NODE")]),_._v(" "),e("li",[_._v("ENTITY_NODE")]),_._v(" "),e("li",[_._v("PROCESSING_INSTRUCTION_NODE")]),_._v(" "),e("li",[_._v("COMMENT_NODE")]),_._v(" "),e("li",[_._v("DOCUMENT_NODE")]),_._v(" "),e("li",[_._v("DOCUMENT_TYPE_NODE")]),_._v(" "),e("li",[_._v("DOCUMENT_FRAGMENT_NODE")]),_._v(" "),e("li",[_._v("NOTATION_NODE")])])]),_._v(" "),e("li",[e("p",[_._v("nodeName 和 nodeValue")]),_._v(" "),e("ul",[e("li",[_._v("对于元素节点，nodeName 中保存的始终都是元素的标签名，而 nodeValue 的值则始终为 null。")])])]),_._v(" "),e("li",[e("p",[_._v("节点关系")]),_._v(" "),e("ul",[e("li",[_._v("每个节点都有一个 childNodes 属性，其中保存着一个 NodeList 对象。")]),_._v(" "),e("li",[_._v("每个节点都有一个 parentNode 属性，该属性指向文档树中的父节点。")]),_._v(" "),e("li",[_._v("通过使用列表中每个节点的 previousSibling 和 nextSibling 属性，可以访问同一列表中的其他节点。")]),_._v(" "),e("li",[_._v("父节点的 firstChild 和 lastChild 属性分别指向其 childNodes 列表中的第一个和最后一个节点。")]),_._v(" "),e("li",[_._v("所有节点都有的最后一个属性是 ownerDocument，该属性指向表示整个文档的文档节点。")])])]),_._v(" "),e("li",[e("p",[_._v("操作节点")]),_._v(" "),e("ul",[e("li",[_._v("appendChild() // 用于向 childNodes 列表的末尾添加一个节点。接受一个参数：要插入的节点。")]),_._v(" "),e("li",[_._v("insertBefore() // 把节点放在 childNodes 列表中某个特定的位置上。接受两个参数：要插入的节点和作为参照的节点。")]),_._v(" "),e("li",[_._v("replaceChild() // 接受两个参数：要插入的节点和要替换的节点。")]),_._v(" "),e("li",[_._v("removeChild() // 接受一个参数：要移除的节点。")]),_._v(" "),e("li",[_._v("cloneNode() // 创建调用这个方法的节点的一个完全相同的副本。接受一个布尔值参数，表示是否执行深复制。")]),_._v(" "),e("li",[_._v("normalize() // 处理文档树中的文本节点。")])])])]),_._v(" "),e("p",[e("strong",[_._v("1.2 Document 类型")])]),_._v(" "),e("ul",[e("li",[_._v("可以表示 HTML 页面或者其他基于 XML 的文档。")]),_._v(" "),e("li",[_._v("表示整个文档，是一组分层节点的根节点。")]),_._v(" "),e("li",[_._v("JavaScript 中，document 对象是 Document 的一个实例。使用 document 对象，有很多种方式可以查询和取得节点。")]),_._v(" "),e("li",[_._v("文档的子节点：document.documentElement document.body document.doctype（浏览器支持不一致）")]),_._v(" "),e("li",[_._v("文档信息：document.title document.URL document.domain document.referrer")]),_._v(" "),e("li",[_._v("查找元素\n"),e("ul",[e("li",[_._v("getElementById() // 接收一个参数：要取得的元素的 ID。只返回文档中第一次出现的元素。")]),_._v(" "),e("li",[_._v("getElementsByTagName() // 接受一个参数：要取得元素的标签名。返回的是包含零或多个元素的 NodeList。")]),_._v(" "),e("li",[_._v("getElementsByName()")])])]),_._v(" "),e("li",[_._v("文档写入\n"),e("ul",[e("li",[_._v("write() // 接受一个字符串参数，即要写入到输出流中的文本。")]),_._v(" "),e("li",[_._v("writeln() // 接受一个字符串参数，即要写入到输出流中的文本。会在字符串的末尾添加一个换行符（\\n）。")]),_._v(" "),e("li",[_._v("open() // 打开网页的输出流")]),_._v(" "),e("li",[_._v("close() // 关闭网页的输出流")])])])]),_._v(" "),e("p",[e("strong",[_._v("1.3 Element 类型")])]),_._v(" "),e("ul",[e("li",[_._v("表示文档中的所有 HTML 或 XML 元素，可以用来操作这些元素的内容和特性。")]),_._v(" "),e("li",[_._v("HTML 元素\n"),e("ul",[e("li",[_._v("操作特性的 DOM 方法主要有三个，分别是 getAttribute()、setAttribute() 和 removeAttribute()")])])])]),_._v(" "),e("p",[e("strong",[_._v("1.4 Text 类型")])]),_._v(" "),e("ul",[e("li",[_._v("可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。")]),_._v(" "),e("li",[_._v("可以使用 document.createTextNode() 创建新文本节点，这个方法接受一个参数——要插入节点中的文本。")]),_._v(" "),e("li",[_._v("如果在一个包含两个或多个文本节点的父元素上调用 normalize() 方法，则会将所有文本节点合并成一个节点。")]),_._v(" "),e("li",[_._v("splitText()，这个方法会将一个文本节点分成两个文本节点，即按照指定的位置分割 nodeValue 值。")])]),_._v(" "),e("p",[e("strong",[_._v("1.5 Comment 类型")])]),_._v(" "),e("ul",[e("li",[_._v("注释节点")])]),_._v(" "),e("p",[e("strong",[_._v("1.6 CDATASection 类型")])]),_._v(" "),e("ul",[e("li",[_._v("只针对基于 XML 的文档，表示的是 CDATA 区域。")])]),_._v(" "),e("p",[e("strong",[_._v("1.7 DocumentType 类型")])]),_._v(" "),e("ul",[e("li",[_._v("包含着与文档的 doctype 有关的所有信息，\n"),e("ul",[e("li",[_._v("name 表示文档类型的名称；")]),_._v(" "),e("li",[_._v("entities 是由文档类型描述的实体的 NamedNodeMap 对象；")]),_._v(" "),e("li",[_._v("notations 是由文档类型描述的符号的 NamedNodeMap 对象。")])])])]),_._v(" "),e("p",[e("strong",[_._v("1.8 DocumentFragment 类型")])]),_._v(" "),e("ul",[e("li",[_._v("文档片段继承了 Node 的所有方法，通常用于执行那些针对文档的 DOM 操作。")])]),_._v(" "),e("p",[e("strong",[_._v("1.9 Attr 类型")])]),_._v(" "),e("ul",[e("li",[_._v("Attr 对象有 3 个属性：name、value 和 specified。\n"),e("ul",[e("li",[_._v("name 是特性名称（与 nodeName 的值相同）")]),_._v(" "),e("li",[_._v("value 是特性的值（与 nodeValue 的值相同）")]),_._v(" "),e("li",[_._v("而 specified 是一个布尔值，用以区别特性是在代码中指定的，还是默认的。")])])])]),_._v(" "),e("h2",{attrs:{id:"_2、dom-操作技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、dom-操作技术"}},[_._v("#")]),_._v(" 2、DOM 操作技术")]),_._v(" "),e("h4",{attrs:{id:"_2-1-动态脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-动态脚本"}},[_._v("#")]),_._v(" 2.1 动态脚本")]),_._v(" "),e("p",[_._v("在页面加载时不存在，但将来的某一时刻通过修改 DOM 动态添加的脚本。")]),_._v(" "),e("h4",{attrs:{id:"_2-2-动态样式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-动态样式"}},[_._v("#")]),_._v(" 2.2 动态样式")]),_._v(" "),e("p",[_._v("在页面加载完成后动态添加到页面中的样式。")]),_._v(" "),e("h4",{attrs:{id:"_2-3-操作表格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-操作表格"}},[_._v("#")]),_._v(" 2.3 操作表格")]),_._v(" "),e("p",[_._v("为了方便构建表格，HTML DOM 还为"),e("code",[_._v("<table>")]),_._v("、"),e("code",[_._v("<tbody>")]),_._v("和"),e("code",[_._v("<tr>")]),_._v("元素添加了一些属性和方法。")]),_._v(" "),e("h4",{attrs:{id:"_2-4-使用-nodelist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-使用-nodelist"}},[_._v("#")]),_._v(" 2.4 使用 NodeList")]),_._v(" "),e("ul",[e("li",[_._v("所有 NodeList 对象都是在访问 DOM 文档时实时运行的查询，始终都会保存着最新、最准确的信息。")]),_._v(" "),e("li",[_._v("NodeList 对象都是“动态的”，这就意味着每次访问 NodeList 对象，都会运行一次查询。有鉴于此，最好的办法就是尽量减少 DOM 操作。")])])])}),[],!1,null,null,null);v.default=l.exports}}]);