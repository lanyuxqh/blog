(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{647:function(t,e,r){"use strict";r.r(e);var s=r(5),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),r("h2",{attrs:{id:"_1-版本控制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-版本控制"}},[t._v("#")]),t._v(" 1. 版本控制")]),t._v(" "),r("p",[r("strong",[t._v("概念")]),t._v("：一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。")]),t._v(" "),r("p",[r("strong",[t._v("作用")]),t._v("：简单说就是用于管理多人协同开发项目的技术。")]),t._v(" "),r("ul",[r("li",[t._v("实现跨区域多人协同开发")]),t._v(" "),r("li",[t._v("追踪和记载一个或者多个文件的历史记录")]),t._v(" "),r("li",[t._v("组织和保护你的源代码和文档")]),t._v(" "),r("li",[t._v("统计工作量")]),t._v(" "),r("li",[t._v("并行开发、提高开发效率")]),t._v(" "),r("li",[t._v("跟踪记录整个软件的开发过程")]),t._v(" "),r("li",[t._v("减轻开发人员的负担，节省时间，同时降低人为错误")])]),t._v(" "),r("p",[r("strong",[t._v("常见的版本控制工具")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("Git")])]),t._v(" "),r("li",[r("strong",[t._v("SVN")]),t._v("（Subversion）")]),t._v(" "),r("li",[r("strong",[t._v("CVS")]),t._v("（Concurrent Versions System）")]),t._v(" "),r("li",[r("strong",[t._v("VSS")]),t._v("（Micorosoft Visual SourceSafe）")]),t._v(" "),r("li",[r("strong",[t._v("TFS")]),t._v("（Team Foundation Server）")]),t._v(" "),r("li",[t._v("Visual Studio Online")])]),t._v(" "),r("p",[r("strong",[t._v("版本控制分类")]),t._v("：")]),t._v(" "),r("ul",[r("li",[t._v("本地版本控制\n"),r("ul",[r("li",[t._v("记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用。如 RCS。")])])]),t._v(" "),r("li",[t._v("集中版本控制\n"),r("ul",[r("li",[t._v("所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改。如 SVN。")])])]),t._v(" "),r("li",[t._v("分布式版本控制\n"),r("ul",[r("li",[t._v("所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时 push 到相应的服务器或其他用户那里。如 Git。")])])])]),t._v(" "),r("h3",{attrs:{id:"_1-1-svn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-svn"}},[t._v("#")]),t._v(" 1.1 SVN")]),t._v(" "),r("ul",[r("li",[t._v("集中式版本控制，易管理")]),t._v(" "),r("li",[t._v("适合人数不多的项目")]),t._v(" "),r("li",[t._v("不做快照的情况下所有历史版本记录都在服务器，服务器硬盘故障可能导致历史数据永久丢失")]),t._v(" "),r("li",[t._v("commit 直接提交到中心库")]),t._v(" "),r("li",[t._v("必须连接在服务器上，否则基本不能工作、提交、对比、还原等")]),t._v(" "),r("li",[t._v("服务器压力较大")])]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p00V4uLaibxtZI9RLpq7tkSdlWiaF92AVeZ0ib9DicqBkS2poo5u8sEU2mCQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),r("h3",{attrs:{id:"_1-2-git"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-git"}},[t._v("#")]),t._v(" 1.2 Git")]),t._v(" "),r("ul",[r("li",[t._v("分布式版本控制，每个人都有一份代码和历史记录")]),t._v(" "),r("li",[t._v("适合多人协作")]),t._v(" "),r("li",[t._v("除了 pull 和 push 需要联网，其余操作均可本地完成")]),t._v(" "),r("li",[t._v("良好的分支机制，可以让主干代码保持干净")]),t._v(" "),r("li",[t._v("速度快， 成熟的架构，开发灵活")])]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0ev8Q7qXjsTfeSwFexdA4tGjFAiaVEKQzAHdGcINXILKflI2cfk9BiawQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),r("h3",{attrs:{id:"_1-3-git-与-svn-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-git-与-svn-的区别"}},[t._v("#")]),t._v(" 1.3 Git 与 SVN 的区别")]),t._v(" "),r("ul",[r("li",[t._v("Git 和 SVN 最大的区别在于 Git 是分布式的，而 SVN 是集中式的。因此 Git 支持离线工作，在本地可以进行很多操作，而 SVN 必须联网才能正常工作。")]),t._v(" "),r("li",[t._v("Git 复杂概念多，SVN 简单易上手。")]),t._v(" "),r("li",[t._v("Git 分支廉价，SVN 分支昂贵。Git 分支是指针指向某次提交，而 SVN 分支是拷贝的目录。这个特性使 Git 的分支切换非常迅速，且创建成本非常低。")]),t._v(" "),r("li",[t._v("Git 没有一个全局的版本号，而 SVN 有。")]),t._v(" "),r("li",[t._v("Git 把内容按元数据方式存储，而 SVN 是按文件。")]),t._v(" "),r("li",[t._v("GIT 的内容完整性要优于 SVN：GIT 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏")]),t._v(" "),r("li",[t._v("GIT 分支和 SVN 的分支不同：svn 会发生分支遗漏的情况，而 git 可以同一个工作目录下快速的在几个分支间切换，很容易发现未被合并的分支，简单而快捷的合并这些文件。")])]),t._v(" "),r("h2",{attrs:{id:"_2-git-历史"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-历史"}},[t._v("#")]),t._v(" 2. Git 历史")]),t._v(" "),r("p",[t._v("Git 诞生于一个极富纷争大举创新的年代。"),r("strong",[t._v("Git 是目前世界上最先进的分布式版本控制系统。")])]),t._v(" "),r("p",[t._v("Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上(1991－2002 年间)。到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。")]),t._v(" "),r("p",[t._v("到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区(特别是 Linux 的缔造者 Linus Torvalds)基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。（2 周左右！） 也就是后来的 Git！")]),t._v(" "),r("p",[t._v("Git 是免费、开源的，最初 Git 是为辅助 Linux 内核开发的，来替代 BitKeeper！")]),t._v(" "),r("h2",{attrs:{id:"_3-git-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-配置"}},[t._v("#")]),t._v(" 3. Git 配置")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('##  查看系统config\ngit config --system --list　　\n#查看当前用户（global）配置\ngit config --global  --list\n\ngit config --global user.name "kuangshen"  #名称\ngit config --global user.email 24736743@qq.com   #邮箱\n')])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br")])]),r("h2",{attrs:{id:"_4-git-基本理论"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-git-基本理论"}},[t._v("#")]),t._v(" 4. Git 基本理论")]),t._v(" "),r("h3",{attrs:{id:"_4-1-四个区域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-四个区域"}},[t._v("#")]),t._v(" 4.1 四个区域")]),t._v(" "),r("p",[t._v("Git 本地有三个工作区域：工作区（Working Directory）、暂存区(Stage/Index)、本地仓库(Repository 或 Git Directory)。如果在加上远程 Git 仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：")]),t._v(" "),r("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a1d538d63559402fbcfd82d68b08061c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"Git经典流程图"}}),t._v(" "),r("ul",[r("li",[t._v("Workspace：工作区，就是你平时存放项目代码的地方。")]),t._v(" "),r("li",[t._v("Index / Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息。")]),t._v(" "),r("li",[t._v("Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中 HEAD 指向最新放入仓库的版本。")]),t._v(" "),r("li",[t._v("Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换。")])]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p0icz6X2aibIgUWzHxtwX8kicPCKpDrsiaPzZk04OlI2bzlydzicBuXTJvLEQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),r("ul",[r("li",[t._v("Directory：使用 Git 管理的一个目录，也就是一个仓库，包含我们的工作空间和 Git 的管理空间。")]),t._v(" "),r("li",[t._v("WorkSpace：工作区，需要通过 Git 进行版本控制的目录和文件，这些目录和文件组成了工作空间。")]),t._v(" "),r("li",[t._v(".git：存放 Git 管理信息的目录，初始化仓库的时候自动创建。"),r("code",[t._v(".git文件")]),t._v("另外一个作用就是它在创建的时候，会自动创建 master 分支，并且将 HEAD 指针指向 master 分支。")]),t._v(" "),r("li",[t._v("Index/Stage：暂存区，或者叫待提交更新区，在提交进入 repo 之前，我们可以把所有的更新放在暂存区。")]),t._v(" "),r("li",[t._v("Local Repo：本地仓库，一个存放在本地的版本库；HEAD 会指向当前的开发分支（branch）。")]),t._v(" "),r("li",[t._v("Stash：隐藏，是一个工作状态保存栈，用于保存/恢复 WorkSpace 中的临时状态。")])]),t._v(" "),r("p",[r("strong",[t._v("暂存区的意义")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("分批递交，降低 commit 的颗粒度")])]),t._v(" "),r("p",[t._v("比如，你修改了 "),r("code",[t._v("a.py")]),t._v("，"),r("code",[t._v("b.py")]),t._v("，其中 "),r("code",[t._v("a.py")]),t._v(" 和 "),r("code",[t._v("c.py")]),t._v(" 是一个功能相关修改，"),r("code",[t._v("b.py")]),t._v("，"),r("code",[t._v("d.py")]),t._v("属于另外一个功能相关修改。就可采用：")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("git add a"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py c"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\ngit commit "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function 1"')]),t._v("\ngit add b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py d"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("py\ngit commit "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function 2"')]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("分阶段递交")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("进行快照，便于回退")])])])]),t._v(" "),r("h3",{attrs:{id:"_4-2-工作流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-工作流程"}},[t._v("#")]),t._v(" 4.2 工作流程")]),t._v(" "),r("p",[t._v("git 的工作流程一般是这样的：")]),t._v(" "),r("p",[t._v("１、在工作目录中添加、修改文件；")]),t._v(" "),r("p",[t._v("２、将需要进行版本管理的文件放入暂存区域；")]),t._v(" "),r("p",[t._v("３、将暂存区域的文件提交到 git 仓库。")]),t._v(" "),r("p",[t._v("因此，git 管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)")]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7Ksu8UlITwMlbX3kMGtZ9p09iaOhl0dACfLrMwNbDzucGQ30s3HnsiaczfcR6dC9OehicuwibKuHjRlzg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1",alt:"图片"}}),t._v(" "),r("h2",{attrs:{id:"_5-git-文件操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-git-文件操作"}},[t._v("#")]),t._v(" 5. Git 文件操作")]),t._v(" "),r("h3",{attrs:{id:"_5-1-文件的四种状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-文件的四种状态"}},[t._v("#")]),t._v(" 5.1 文件的四种状态")]),t._v(" "),r("p",[t._v("版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。")]),t._v(" "),r("ul",[r("li",[t._v("Untracked：未跟踪，此文件在文件夹中，但并没有加入到 git 库，不参与版本控制。通过 git add 状态变为 Staged。")]),t._v(" "),r("li",[t._v("Unmodify：文件已经入库，未修改，即版本库中的文件快照内容与文件夹中完全一致。这种类型的文件有两种去处，如果它被修改，则变为 Modified；如果使用 git rm 移出版本库，则变为 Untracked。")]),t._v(" "),r("li",[t._v("Modified：文件已修改，仅仅是修改，并没有进行其他的操作。这个文件也有两个去处，通过 git add 可变为 Staged；使用 git checkout 丢弃修改过，则变为 Unmodify，这个 git checkout 即从库中取出文件，覆盖当前修改 !")]),t._v(" "),r("li",[t._v("Staged：暂存状态。执行 git commit 则将修改同步到库中，这时库中的文件和本地文件又变为一致，变为 Unmodify。执行 git reset HEAD filename 取消暂存，变为 Modified。")])]),t._v(" "),r("h3",{attrs:{id:"_5-2-查看文件状态"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-查看文件状态"}},[t._v("#")]),t._v(" 5.2 查看文件状态")]),t._v(" "),r("p",[t._v("上面说文件有 4 种状态，通过如下命令可以查看到文件的状态：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("#查看指定文件状态\ngit status [filename]\n#查看所有文件状态\ngit status\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])]),r("h3",{attrs:{id:"_5-3-忽略文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-忽略文件"}},[t._v("#")]),t._v(" 5.3 忽略文件")]),t._v(" "),r("p",[t._v("有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等.")]),t._v(" "),r("p",[t._v('在主目录下建立".gitignore"文件，此文件有如下规则：')]),t._v(" "),r("ol",[r("li",[t._v("忽略文件中的空行或以井号（#）开始的行将会被忽略。")]),t._v(" "),r("li",[t._v("可以使用 Linux 通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。")]),t._v(" "),r("li",[t._v("如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。")]),t._v(" "),r("li",[t._v("如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。")]),t._v(" "),r("li",[t._v("如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。")])]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！\n!lib.txt     #但lib.txt除外\n/temp        #仅忽略项目根目录下的TODO文件,不包括其它目录temp\nbuild/       #忽略build/目录下的所有文件\ndoc/*.txt    #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("h2",{attrs:{id:"_6-git-常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-git-常用命令"}},[t._v("#")]),t._v(" 6. Git 常用命令")]),t._v(" "),r("p",[r("strong",[t._v("配置命令")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("git config --list")]),t._v("：列出当前配置")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git config --local --list")]),t._v("：列出 Repository 配置")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git config --global --list")]),t._v("：列出全局配置")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git config --system --list")]),t._v("：列出系统配置")])]),t._v(" "),r("li",[r("p",[r("code",[t._v('git config --global user.name "your name"')]),t._v("：配置用户名")])]),t._v(" "),r("li",[r("p",[r("code",[t._v('git config --global user.email "youremail@github.com"')]),t._v("：配置用户邮箱")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git config --global color.ui true")]),t._v("：让 Git 显示颜色，会让命令输出看起来更醒目")])])]),t._v(" "),r("p",[r("strong",[t._v("状态查询")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git status")]),t._v("：查看当前仓库的状态\n"),r("ul",[r("li",[t._v("Changes not staged for commit：工作区有该内容，但是暂存区没有，需要"),r("code",[t._v("git add")])]),t._v(" "),r("li",[t._v("Changes to be committed：文件放在暂存区了，需要"),r("code",[t._v("git commit")])]),t._v(" "),r("li",[t._v("nothing to commit, working tree clean：需要将本地的代码推送到远端")])])]),t._v(" "),r("li",[r("code",[t._v("git log")]),t._v("：查看从最近到最远的提交历史")]),t._v(" "),r("li",[r("code",[t._v("git reflog")]),t._v("：查看可引用的历史版本")])]),t._v(" "),r("p",[r("strong",[t._v("差异比较")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git diff")]),t._v(" ：比较工作区与暂存区")]),t._v(" "),r("li",[r("code",[t._v("git diff --cached")]),t._v("：比较暂存区与版本区")]),t._v(" "),r("li",[r("code",[t._v("git diff HEAD")]),t._v("：比较工作区与版本区")]),t._v(" "),r("li",[r("code",[t._v("git diff <commit ID> <commit ID>")]),t._v("：比较两个 commit")])]),t._v(" "),r("p",[r("strong",[t._v("花式撤销")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git reset HEAD <file>")]),t._v("：暂存区撤销，与版本区一致 (不覆盖工作区)")]),t._v(" "),r("li",[r("code",[t._v("git checkout <file>")]),t._v("：工作区撤销，与暂存区一致（暂存区没有找版本区）")]),t._v(" "),r("li",[r("code",[t._v("git rm <file> --cached")]),t._v(" ：删除暂存区的文件")]),t._v(" "),r("li",[r("code",[t._v("git rm <file>")]),t._v(" ：同时删除暂存区和工作区")]),t._v(" "),r("li",[r("code",[t._v("git reset --hard <version>")]),t._v("： 恢复版本区指定版本的内容到工作区，直接删除指定的提交\n"),r("ul",[r("li",[t._v("--hard 回退全部，包括版本区、暂存区、工作区")]),t._v(" "),r("li",[t._v("--mixed 回退部分，包括版本区、暂存区")]),t._v(" "),r("li",[t._v("--soft 只回退版本区")])])]),t._v(" "),r("li",[r("code",[t._v("git revert -n <version>")]),t._v("：回退版本，会生成一个新的提交记录")])]),t._v(" "),r("p",[r("strong",[t._v("分支管理")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git branch")]),t._v("： 查看本地分支")]),t._v(" "),r("li",[r("code",[t._v("git branch -r")]),t._v("： 查看远程分支")]),t._v(" "),r("li",[r("code",[t._v("git branch -a")]),t._v("： 查看本地和远程分支")]),t._v(" "),r("li",[r("code",[t._v("git branch <branch-name>")]),t._v("： 创建分支")]),t._v(" "),r("li",[r("code",[t._v("git checkout <branch-name>")]),t._v(" ：切换分支")]),t._v(" "),r("li",[r("code",[t._v("git checkout -b <branch-name>")]),t._v("： 创建并切换到新建分支")]),t._v(" "),r("li",[r("code",[t._v("git branch -m <oldbranch-name> <newbranch-name>")]),t._v("：重命名分支")]),t._v(" "),r("li",[r("code",[t._v("git branch -d <branch-name>")]),t._v("：删除分支，有可能会删除失败，因为"),r("code",[t._v("Git")]),t._v("会保护没有被合并的分支")]),t._v(" "),r("li",[r("code",[t._v("git branch -D <branch-name>")]),t._v("：强行删除，丢弃没被合并的分支")]),t._v(" "),r("li",[r("code",[t._v("git merge <branch-name>")]),t._v("：当前分支与指定分支合并")]),t._v(" "),r("li",[r("code",[t._v("git merge --no-ff <branch-name>")]),t._v("：合并分支的时候禁用"),r("code",[t._v("Fast forward")]),t._v("模式，因为这个模式会丢失分支历史信息")]),t._v(" "),r("li",[r("code",[t._v("git branch --merged")]),t._v("： 查看哪些分支已经合并到当前分支")]),t._v(" "),r("li",[r("code",[t._v("git branch --no-merged")]),t._v("：查看哪些分支没有合并到当前分支")]),t._v(" "),r("li",[r("code",[t._v("git log --graph")]),t._v("：查看分支合并图")]),t._v(" "),r("li",[r("code",[t._v("git branch -v")]),t._v("：查看各个分支最后一个提交对象的信息")]),t._v(" "),r("li",[r("code",[t._v("git push origin -d <branch-name>")]),t._v("：删除远程分支")]),t._v(" "),r("li",[r("code",[t._v("git checkout -b <branch-name> origin/远程分支名x")]),t._v("：拉取远程分支并创建本地分支")]),t._v(" "),r("li",[r("code",[t._v("git rebase")]),t._v("：把分叉的提交历史“整理”成一条直线，看上去更直观")])]),t._v(" "),r("p",[r("strong",[t._v("fetch 指令")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git fetch origin <branch-name>:<local-branch-name>")]),t._v("：拉取远程分支并创建本地分支")]),t._v(" "),r("li",[r("code",[t._v("git fetch <远程主机名>")]),t._v(" ：将某个远程主机的更新，全部取回本地")]),t._v(" "),r("li",[r("code",[t._v("git fetch <远程主机名> <分支名>")]),t._v("：取回特定分支的更新")])]),t._v(" "),r("p",[r("strong",[t._v("文件暂存")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git stash")]),t._v("：当有其他任务插进来时，把当前工作现场“存储”起来，以后恢复后继续工作")]),t._v(" "),r("li",[r("code",[t._v("git stash list")]),t._v("：查看你刚刚“存放”起来的工作去哪里了")]),t._v(" "),r("li",[r("code",[t._v("git stash drop <stash@{ID}>")]),t._v("：删除"),r("code",[t._v("stash")]),t._v("内容")]),t._v(" "),r("li",[r("code",[t._v("git stash clear")]),t._v("：删除全部缓存")]),t._v(" "),r("li",[r("code",[t._v("git stash apply <stash@{ID}>")]),t._v("：恢复却不删除"),r("code",[t._v("stash")]),t._v("内容")]),t._v(" "),r("li",[r("code",[t._v("git stash pop <stash@{ID}>")]),t._v("：恢复的同时把 stash 内容也删了")])]),t._v(" "),r("p",[r("strong",[t._v("提交文件")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("code",[t._v("git init")]),t._v("：初始化仓库")]),t._v(" "),r("li",[r("code",[t._v("git add .")]),t._v(" 把工作区的文件全部提交到暂存区")]),t._v(" "),r("li",[r("code",[t._v("git add ./<file>/")]),t._v("：把工作区的"),r("code",[t._v("<file>")]),t._v("文件提交到暂存区")]),t._v(" "),r("li",[r("code",[t._v('git commit -m "xxx"')]),t._v("：把暂存区的所有文件提交到版本区，暂存区空空荡荡")]),t._v(" "),r("li",[r("code",[t._v("git remote add origin https://github.com/name/name_cangku.git")]),t._v("：把本地仓库与远程仓库连接起来")]),t._v(" "),r("li",[r("code",[t._v("git push -u origin master")]),t._v("：把版本区的主分支"),r("code",[t._v("master")]),t._v("提交到远程仓库")]),t._v(" "),r("li",[r("code",[t._v("git push -u origin <其他分支>")]),t._v("：把其他分支提交到远程仓库")]),t._v(" "),r("li",[r("code",[t._v("git remote")]),t._v("：查看远程仓库的信息，会显示"),r("code",[t._v("origin")]),t._v("，远程仓库默认名称为"),r("code",[t._v("origin")])]),t._v(" "),r("li",[r("code",[t._v("git pull")]),t._v("：把最新的提交从远程仓库中抓取下来，在本地合并，和"),r("code",[t._v("git push")]),t._v("相反")]),t._v(" "),r("li",[r("code",[t._v("git clone <仓库地址>")]),t._v("：下载克隆文件")])]),t._v(" "),r("p",[r("strong",[t._v("Git 标签")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("p",[r("code",[t._v("git tag")]),t._v("：查看所有标签，可以知道历史版本的 tag")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git tag <name>")]),t._v("：打标签，默认为"),r("code",[t._v("HEAD")]),t._v("。比如"),r("code",[t._v("git tag v1.0")])])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git tag <tagName> <版本号>")]),t._v("：把版本号打上标签，版本号就是"),r("code",[t._v("commit")]),t._v("时，跟在旁边的一串字母数字")])]),t._v(" "),r("li",[r("p",[r("code",[t._v('git tag -a <tagName> -m "<说明>"')]),t._v("：创建带说明的标签")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git show <tagName>")]),t._v("：查看标签信息")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git tag -d <tagName>")]),t._v("：删除标签")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git push origin <tagname>")]),t._v("：推送某个标签到远程")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git push origin --tags")]),t._v("：一次性推送全部尚未推送到远程的本地标签")])]),t._v(" "),r("li",[r("p",[r("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v("：删除远程标签")])])]),t._v(" "),r("h3",{attrs:{id:"_6-1-git-merge-和-git-rebase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-git-merge-和-git-rebase"}},[t._v("#")]),t._v(" 6.1 git merge 和 git rebase")]),t._v(" "),r("p",[t._v("git merge 和 git rebase 都是用于分支合并，关键"),r("strong",[t._v("在")]),t._v(" "),r("strong",[t._v("commit 记录的处理上不同")]),t._v("：")]),t._v(" "),r("ul",[r("li",[t._v("git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。")]),t._v(" "),r("li",[t._v("git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录了。")])]),t._v(" "),r("p",[r("strong",[t._v("git merge")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//将分支切换到master分支\ngit checkout master\n\n//把test分支合并到master分支\ngit merge test\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03a1dcb7d79d4bc5b4e2d472526bc06e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"image-20211104215627579"}}),t._v(" "),r("p",[t._v("当执行 merge 操作时，git 会把两个分支的最新快照（"),r("code",[t._v("F、E")]),t._v(" 和 "),r("code",[t._v("D、C")]),t._v("）以及二者最近的共同祖先（"),r("code",[t._v("B")]),t._v("）进行三方合并，合并的结果是生成一个新的快照"),r("code",[t._v("G")]),t._v("（并提交）。")]),t._v(" "),r("p",[r("strong",[t._v("git rebase")]),t._v("：")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("//将分支切换到master分支\ngit checkout master\n\n//把test分支合并到master分支\ngit rebase test\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br")])]),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1552dbc2a3434303af00151992ece1b0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"img"}}),t._v(" "),r("p",[t._v("当执行 rebase 操作时，git 会从两个分支的共同祖先（"),r("code",[t._v("B")]),t._v("）开始提取待变基分支（master）上的修改，然后将待变基分支指向基分支（test）的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。")]),t._v(" "),r("p",[t._v("用一句话解释就是改变基底。master 分支原来的基底是 A，现在变成了以 test 分支最新的提交 F 做为新的基底了。")]),t._v(" "),r("p",[r("strong",[t._v("使用场景")]),t._v("：")]),t._v(" "),r("p",[t._v("当我们拉取公共分支最新代码的时候，使用 rebase；往公共分支上合代码的时候，使用 merge 。")]),t._v(" "),r("h3",{attrs:{id:"_6-2-git-revert-和-git-reset"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-git-revert-和-git-reset"}},[t._v("#")]),t._v(" 6.2 git revert 和 git reset")]),t._v(" "),r("p",[t._v("git revert 是根据那个 commit 逆向生成一个新的 commit，版本历史是不会被破坏的。")]),t._v(" "),r("p",[t._v("git reset 是会"),r("strong",[t._v("修改")]),t._v("版本历史的，他会丢弃掉一些版本历史。")]),t._v(" "),r("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://segmentfault.com/img/bVz7ph?w=236&h=238",alt:"图片描述"}}),t._v(" "),r("p",[r("strong",[t._v("已经 push 到远程仓库的 commit 不允许 reset")])]),t._v(" "),r("h3",{attrs:{id:"_6-3-git-fetch-和-git-pull-的区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-git-fetch-和-git-pull-的区别"}},[t._v("#")]),t._v(" 6.3 git fetch 和 git pull 的区别")]),t._v(" "),r("p",[t._v("git fetch：只是将远程仓库的变化下载下来，并没有和本地分支合并。")]),t._v(" "),r("p",[t._v("git pull：会将远程仓库的变化下载下来，并和当前分支合并。（相当于"),r("code",[t._v("git fetch & git merge FETCH_HEAD")]),t._v("）")]),t._v(" "),r("h3",{attrs:{id:"_6-4-git-的撤销回滚和删除"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-git-的撤销回滚和删除"}},[t._v("#")]),t._v(" 6.4 git 的撤销回滚和删除")]),t._v(" "),r("p",[r("strong",[t._v("撤销")]),t._v("：将本地仓库的代码还原")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("情况一")]),t._v("：文件被修改了，但未执行"),r("code",[t._v("git add")]),t._v("操作")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git checkout "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\ngit checkout "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况二")]),t._v("：同时对多个文件执行了"),r("code",[t._v("git add")]),t._v("操作，但本次只想提交其中一部分文件")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git reset HEAD "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况三")]),t._v("：文件执行了"),r("code",[t._v("git add")]),t._v("操作，但想撤销对其的修改")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  取消暂存")]),t._v("\ngit reset HEAD "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  撤销修改")]),t._v("\ngit checkout "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况四")]),t._v("：修改的文件已被"),r("code",[t._v("git commit")]),t._v("，但想再次修改不再产生新的 Commit")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git commit "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("amend "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m"),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"说明"')]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况五")]),t._v("：已在本地进行了多次"),r("code",[t._v("git commit")]),t._v("操作，现在想撤销到其中某次 Commit")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git reset "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("hard"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("soft"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("mixed"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("merge"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("keep"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("HEAD"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ul",[r("li",[r("strong",[t._v("git reset –-soft")]),t._v("：回退到某个版本，只回退 commit 的信息，不会恢复到暂存区 index file 一级。如果还要提交直接 commit 即可；")]),t._v(" "),r("li",[r("strong",[t._v("git reset -–hard")]),t._v("：彻底回退到某个版本，本地的源码也会变为上一个版本的内容，撤销的 commit 中所包含的更改被冲掉；")])])])]),t._v(" "),r("p",[r("strong",[t._v("回滚")]),t._v("：将已被提交到远程仓库的代码还原的操作")]),t._v(" "),r("ul",[r("li",[t._v("注意：对远程仓库做回滚操作是有风险的，需提前做好备份和通知其他团队成员")])]),t._v(" "),r("p",[t._v("每次更新线上，打一个 tag（标记一个版本号）")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git checkout "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("如果你回到当前 HEAD 指向")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git checkout "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch_name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("ul",[r("li",[r("p",[r("strong",[t._v("情况一")]),t._v("：撤销指定文件到指定版本")]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  查看指定文件的历史版本")]),t._v("\ngit log "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  回滚到指定commitID")]),t._v("\ngit checkout "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitID"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("filename"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况二")]),t._v("：删除最后一次远程提交")]),t._v(" "),r("ul",[r("li",[r("p",[r("strong",[t._v("方式一：使用 revert")])]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git revert HEAD\ngit push origin master\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("方式二：用 reset")])]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("git reset "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("hard HEAD"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("\ngit push origin master "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])])]),t._v(" "),r("li",[r("p",[t._v("二者区别：")]),t._v(" "),r("p",[r("strong",[t._v("revert")]),t._v(" 是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；")]),t._v(" "),r("p",[r("strong",[t._v("reset")]),t._v(" 是指将 HEAD 指针指到指定提交，历史记录中不会出现放弃的提交记录。")])])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("情况三：回滚某次提交")])]),t._v(" "),r("div",{staticClass:"language-python line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("##  找到要回滚的commitID")]),t._v("\ngit log\ngit revert commitID\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br")])])])]),t._v(" "),r("p",[t._v("https://blog.csdn.net/ligang2585116/article/details/71094887")]),t._v(" "),r("h2",{attrs:{id:"_7-分支命名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-分支命名"}},[t._v("#")]),t._v(" 7. 分支命名")]),t._v(" "),r("p",[r("strong",[t._v("master 分支")])]),t._v(" "),r("ol",[r("li",[t._v("主分支，用于部署生产环境的分支，确保稳定性。")]),t._v(" "),r("li",[t._v("master 分支一般由 develop 以及 hotfix 分支合并，任何情况下都不能直接修改代码。")])]),t._v(" "),r("p",[r("strong",[t._v("develop 分支")])]),t._v(" "),r("ol",[r("li",[t._v("develop 为开发分支，通常情况下，保存最新完成以及 bug 修复后的代码。")]),t._v(" "),r("li",[t._v("开发新功能时，feature 分支都是基于 develop 分支下创建的。")])]),t._v(" "),r("p",[r("strong",[t._v("feature 分支")])]),t._v(" "),r("ol",[r("li",[t._v("开发新功能，基本上以 develop 为基础创建 feature 分支。")]),t._v(" "),r("li",[t._v("分支命名：feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module。")])]),t._v(" "),r("p",[t._v("**这点我深有体会，我在网易，mentor 就是这么教我的，**通常建一个 feature 分支。")]),t._v(" "),r("p",[r("strong",[t._v("release 分支")])]),t._v(" "),r("ol",[r("li",[t._v("release 为预上线分支，发布提测阶段，会 release 分支代码为基准提测。")])]),t._v(" "),r("p",[r("strong",[t._v("hotfix 分支")])]),t._v(" "),r("ol",[r("li",[t._v("分支命名：hotfix/ 开头的为修复分支，它的命名规则与 feature 分支类似。")]),t._v(" "),r("li",[t._v("线上出现紧急问题时，需要及时修复，以 master 分支为基线，创建 hotfix 分支，修复完成后，需要合并到 master 分支和 develop 分支。")])]),t._v(" "),r("h2",{attrs:{id:"_8-常用的-linux-命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-常用的-linux-命令"}},[t._v("#")]),t._v(" 8. 常用的 Linux 命令")]),t._v(" "),r("p",[t._v("1）cd : 改变目录。")]),t._v(" "),r("p",[t._v("2）cd . . 回退到上一个目录。")]),t._v(" "),r("p",[t._v("3）pwd : 显示当前所在的目录路径。")]),t._v(" "),r("p",[t._v("4）ls(ll): 都是列出当前目录中的所有文件，只不过 ll 列出的内容更为详细。")]),t._v(" "),r("p",[t._v("5）touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件。")]),t._v(" "),r("p",[t._v("6）rm: 删除一个文件，rm index.js 就会把 index.js 文件删除。")]),t._v(" "),r("p",[t._v("7）mkdir: 新建一个目录，就是新建一个文件夹。")]),t._v(" "),r("p",[t._v("8）rm -r : 删除一个文件夹，rm -r src 删除 src 目录")]),t._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br")])]),r("p",[t._v("9）mv 移动文件，mv index.html src，index.html 是我们要移动的文件，src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。")]),t._v(" "),r("p",[t._v("10）reset 重新初始化终端/清屏。")]),t._v(" "),r("p",[t._v("11）clear 清屏。")]),t._v(" "),r("p",[t._v("12）history 查看命令历史。")]),t._v(" "),r("p",[t._v("13）help 帮助。")]),t._v(" "),r("p",[t._v("14）exit 退出。")]),t._v(" "),r("p",[t._v("15）#表示注释。")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#tar",target:"_blank",rel:"noopener noreferrer"}},[t._v("tar"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#grep",target:"_blank",rel:"noopener noreferrer"}},[t._v("grep"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#find",target:"_blank",rel:"noopener noreferrer"}},[t._v("find"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ssh",target:"_blank",rel:"noopener noreferrer"}},[t._v("ssh"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#sed",target:"_blank",rel:"noopener noreferrer"}},[t._v("sed"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#awk",target:"_blank",rel:"noopener noreferrer"}},[t._v("awk"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#vim",target:"_blank",rel:"noopener noreferrer"}},[t._v("vim"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#diff",target:"_blank",rel:"noopener noreferrer"}},[t._v("diff"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#sort",target:"_blank",rel:"noopener noreferrer"}},[t._v("sort"),r("OutboundLink")],1)]),t._v(" "),r("th",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#export",target:"_blank",rel:"noopener noreferrer"}},[t._v("export"),r("OutboundLink")],1)])])]),t._v(" "),r("tbody",[r("tr",[r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#args",target:"_blank",rel:"noopener noreferrer"}},[t._v("args"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ls",target:"_blank",rel:"noopener noreferrer"}},[t._v("ls"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#pwd",target:"_blank",rel:"noopener noreferrer"}},[t._v("pwd"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cd",target:"_blank",rel:"noopener noreferrer"}},[t._v("cd"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#gzip",target:"_blank",rel:"noopener noreferrer"}},[t._v("gzip"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#bzip2",target:"_blank",rel:"noopener noreferrer"}},[t._v("bzip2"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#unzip",target:"_blank",rel:"noopener noreferrer"}},[t._v("unzip"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#shutdown",target:"_blank",rel:"noopener noreferrer"}},[t._v("shutdown"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ftp",target:"_blank",rel:"noopener noreferrer"}},[t._v("ftp"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#crontab",target:"_blank",rel:"noopener noreferrer"}},[t._v("crontab"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#service",target:"_blank",rel:"noopener noreferrer"}},[t._v("service"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ps",target:"_blank",rel:"noopener noreferrer"}},[t._v("ps"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#free",target:"_blank",rel:"noopener noreferrer"}},[t._v("free"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#top",target:"_blank",rel:"noopener noreferrer"}},[t._v("top"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#df",target:"_blank",rel:"noopener noreferrer"}},[t._v("df"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#kill",target:"_blank",rel:"noopener noreferrer"}},[t._v("kill"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#rm",target:"_blank",rel:"noopener noreferrer"}},[t._v("rm"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cp",target:"_blank",rel:"noopener noreferrer"}},[t._v("cp"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mv",target:"_blank",rel:"noopener noreferrer"}},[t._v("mv"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#cat",target:"_blank",rel:"noopener noreferrer"}},[t._v("cat"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mount",target:"_blank",rel:"noopener noreferrer"}},[t._v("mount"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#chmod",target:"_blank",rel:"noopener noreferrer"}},[t._v("chmod"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#chown",target:"_blank",rel:"noopener noreferrer"}},[t._v("chown"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#passwd",target:"_blank",rel:"noopener noreferrer"}},[t._v("passwd"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mkdir",target:"_blank",rel:"noopener noreferrer"}},[t._v("mkdir"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ifconfig",target:"_blank",rel:"noopener noreferrer"}},[t._v("ifconfig"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#uname",target:"_blank",rel:"noopener noreferrer"}},[t._v("uname"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#whereis",target:"_blank",rel:"noopener noreferrer"}},[t._v("whereis"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#whatis",target:"_blank",rel:"noopener noreferrer"}},[t._v("whatis"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#locate",target:"_blank",rel:"noopener noreferrer"}},[t._v("locate"),r("OutboundLink")],1)])]),t._v(" "),r("tr",[r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#man",target:"_blank",rel:"noopener noreferrer"}},[t._v("man"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#tail",target:"_blank",rel:"noopener noreferrer"}},[t._v("tail"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#less",target:"_blank",rel:"noopener noreferrer"}},[t._v("less"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#su",target:"_blank",rel:"noopener noreferrer"}},[t._v("su"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#mysql",target:"_blank",rel:"noopener noreferrer"}},[t._v("mysql"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#yum",target:"_blank",rel:"noopener noreferrer"}},[t._v("yum"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#rpm",target:"_blank",rel:"noopener noreferrer"}},[t._v("rpm"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#ping",target:"_blank",rel:"noopener noreferrer"}},[t._v("ping"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#date",target:"_blank",rel:"noopener noreferrer"}},[t._v("date"),r("OutboundLink")],1)]),t._v(" "),r("td",[r("a",{attrs:{href:"https://gywbd.github.io/posts/2014/8/50-linux-commands.html#wget",target:"_blank",rel:"noopener noreferrer"}},[t._v("wget"),r("OutboundLink")],1)])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);