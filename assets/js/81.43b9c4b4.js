(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{643:function(_,v,t){"use strict";t.r(v);var r=t(5),e=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"第-6-章-面向对象的程序设计"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-6-章-面向对象的程序设计"}},[_._v("#")]),_._v(" 第 6 章_面向对象的程序设计")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMA-262 把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。”")])]),_._v(" "),t("h2",{attrs:{id:"_6-1-理解对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-理解对象"}},[_._v("#")]),_._v(" 6.1 理解对象")]),_._v(" "),t("h3",{attrs:{id:"_6-1-1-属性类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-1-属性类型"}},[_._v("#")]),_._v(" 6.1.1 属性类型")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMA-262 第 5 版在定义只有内部才用的特性（attribute）时，描述了属性（property）的各种特征。")])]),_._v(" "),t("blockquote",[t("p",[_._v("ECMA-262 定义这些特性是为了实现 JavaScript 引擎用的，因此在 JavaScript 中 不能直接访问它们。为了表示特性是内部值，该规范把它们放在了两对方括号中。")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("数据属性")]),_._v(" "),t("ul",[t("li",[_._v("包含一个数据值的位置，在这个位置可以读取和写入值。")]),_._v(" "),t("li",[_._v("数据属性有 4 个描述其行为的特性。\n"),t("ul",[t("li",[_._v("[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。")]),_._v(" "),t("li",[_._v("[[Enumerable]]：表示能否通过 for-in 循环返回属性。")]),_._v(" "),t("li",[_._v("[[Writable]]：表示能否修改属性的值。")]),_._v(" "),t("li",[_._v("[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。")])])]),_._v(" "),t("li",[_._v("要修改属性默认的特性，必须使用 ECMAScript 5 的 Object.defineProperty()方法。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable 和 value。设置其中的一或多个值，可以修改对应的特性值。")])])]),_._v(" "),t("li",[t("p",[_._v("访问器属性")]),_._v(" "),t("ul",[t("li",[_._v("访问器属性不包含数据值；它们包含一对 getter 和 setter 函数（不过，这两个函数都不是必需的）。在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值；在写入访问器属性时，会调用 setter 函数并传入新值，这个函数负责决定如何处理数据。")]),_._v(" "),t("li",[_._v("访问器属性有如下 4 个特性。\n"),t("ul",[t("li",[_._v("[[Configurable]]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。")]),_._v(" "),t("li",[_._v("[[Enumerable]]：表示能否通过 for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为 true。")]),_._v(" "),t("li",[_._v("[[Get]]：在读取属性时调用的函数。默认值为 undefined。")]),_._v(" "),t("li",[_._v("[[Set]]：在写入属性时调用的函数。默认值为 undefined。")])])]),_._v(" "),t("li",[_._v("访问器属性不能直接定义，必须使用 Object.defineProperty()来定义。")])])])]),_._v(" "),t("h3",{attrs:{id:"_6-1-2-定义多个属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-2-定义多个属性"}},[_._v("#")]),_._v(" 6.1.2 定义多个属性")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Object.defineProperties()方法")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("利用这个方法可以通过描述符一次定义多个属性。")])]),_._v(" "),t("li",[t("p",[_._v("这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对\n应。")])])])])]),_._v(" "),t("h3",{attrs:{id:"_6-1-3-读取属性的特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-3-读取属性的特性"}},[_._v("#")]),_._v(" 6.1.3 读取属性的特性")]),_._v(" "),t("ul",[t("li",[_._v("Object.getOwnPropertyDescriptor()方法\n"),t("ul",[t("li",[_._v("可以取得给定属性的描述符。")]),_._v(" "),t("li",[_._v("这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。")]),_._v(" "),t("li",[_._v("返回值是一个对象，如果是访问器属性，这个对象的属性有 configurable、enumerable、get 和 set；如果是数据属性，这个对象的属性有 configurable、enumerable、writable 和 value。")])])])]),_._v(" "),t("h2",{attrs:{id:"_6-2-创建对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-创建对象"}},[_._v("#")]),_._v(" 6.2 创建对象")]),_._v(" "),t("p",[t("s",[_._v("虽然 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。")])]),_._v(" "),t("h3",{attrs:{id:"_6-2-1-工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-1-工厂模式"}},[_._v("#")]),_._v(" 6.2.1 工厂模式")]),_._v(" "),t("blockquote",[t("p",[_._v("工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程。考虑到在 ECMAScript 中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节。")])]),_._v(" "),t("p",[t("s",[_._v("工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。")])]),_._v(" "),t("h3",{attrs:{id:"_6-2-2-构造函数模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-2-构造函数模式"}},[_._v("#")]),_._v(" 6.2.2 构造函数模式")]),_._v(" "),t("ul",[t("li",[_._v("相比于工厂模式，不同之处：\n"),t("ul",[t("li",[_._v("没有显式地创建对象；")]),_._v(" "),t("li",[_._v("直接将属性和方法赋给了 this 对象；")]),_._v(" "),t("li",[_._v("没有 return 语句。")])])]),_._v(" "),t("li",[_._v("要创建 Person 的新实例，必须使用 new 操作符。以这种方式调用构造函数实际上会经历以下 4 个步骤：\n"),t("ul",[t("li",[_._v("创建一个新对象；")]),_._v(" "),t("li",[_._v("将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）；")]),_._v(" "),t("li",[_._v("执行构造函数中的代码（为这个新对象添加属性）；")]),_._v(" "),t("li",[_._v("返回新对象。")])])]),_._v(" "),t("li",[_._v("优点：创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型。")]),_._v(" "),t("li",[_._v("缺点：每个方法都要在每个实例上重新创建一遍。即不同实例上的同名函数是不相等的。\n"),t("ul",[t("li",[_._v("通过把函数定义转移到构造函数外部来解决这个问题。")]),_._v(" "),t("li",[_._v("新问题：这个自定义的引用类型就丝毫没有封装性可言了。（引出原型模式）")])])])]),_._v(" "),t("h3",{attrs:{id:"_6-2-3-原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-3-原型模式"}},[_._v("#")]),_._v(" 6.2.3 原型模式")]),_._v(" "),t("blockquote",[t("p",[_._v("我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。")])]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("原型对象")]),_._v(" "),t("ul",[t("li",[_._v("使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。")]),_._v(" "),t("li",[_._v("函数的 prototype 属性指向函数的原型对象。")]),_._v(" "),t("li",[_._v("所有原型对象都会自动获得一个 constructor（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。(详见图)")]),_._v(" "),t("li",[_._v("实例包含一个内部属性[[Prototype]]，该属性仅仅指向原型对象。虽然无法访问到[[Prototype]]，但可以通过 isPrototypeOf()方法来确定对象之间是否存在这种关系。getPrototypeOf()方法返回[[Prototype]]的值。")]),_._v(" "),t("li",[_._v("使用 hasOwnProperty()方法可以检测一个属性是存在于实例中，还是存在于原型中。")])])]),_._v(" "),t("li",[t("strong",[_._v("原型与 in 操作符")]),_._v(" "),t("ul",[t("li",[_._v("同时使用 hasOwnProperty()方法和 in 操作符，就可以确定该属性到底是存在于对象中，还是存在于原型中。")]),_._v(" "),t("li",[_._v("在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性。")]),_._v(" "),t("li",[_._v("要取得对象上所有可枚举的实例属性，可以使用 ECMAScript 5 的 Object.keys() 方法。")]),_._v(" "),t("li",[_._v("如果你想要得到所有实例属性，无论它是否可枚举，都可以使用 Object.getOwnPropertyNames()方法。")])])]),_._v(" "),t("li",[t("strong",[_._v("更简单的原型语法")]),_._v(" "),t("ul",[t("li",[_._v("常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象，但是 constructor 属性不再指向 Person 了。")])])]),_._v(" "),t("li",[t("strong",[_._v("原型的动态性")]),_._v(" "),t("ul",[t("li",[_._v("可以随时为原型添加属性和方法，并且修改能够立即在所有对象实例中反映出来。")]),_._v(" "),t("li",[_._v("但如果是重写整个原型对象，那么情况就不一样了**。切记：实例中的指针仅指向原型，而不指向构造函数**。")])])]),_._v(" "),t("li",[t("strong",[_._v("原生对象的原型")]),_._v(" "),t("ul",[t("li",[_._v("所有原生引用类型（Object、Array、String，等等）都在其构造函数的原型上定义了方法。同理。")])])]),_._v(" "),t("li",[t("strong",[_._v("原型对象的问题")]),_._v(" "),t("ul",[t("li",[_._v("它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。")]),_._v(" "),t("li",[_._v("原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性倒也说得过去。然而，对于包含引用类型值的属性来说，问题就比较突出了。")]),_._v(" "),t("li",[t("s",[_._v("单独使用原型模式")])])])])]),_._v(" "),t("h3",{attrs:{id:"_6-2-4-组合使用构造函数模式和原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-4-组合使用构造函数模式和原型模式"}},[_._v("#")]),_._v(" 6.2.4 组合使用构造函数模式和原型模式")]),_._v(" "),t("ul",[t("li",[_._v("构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。")]),_._v(" "),t("li",[_._v("最大限度地节省了内存，还支持向构造函数传递参数。（优秀!）")])]),_._v(" "),t("h3",{attrs:{id:"_6-2-5-动态原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-5-动态原型模式"}},[_._v("#")]),_._v(" 6.2.5 动态原型模式")]),_._v(" "),t("ul",[t("li",[_._v("可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。")])]),_._v(" "),t("h3",{attrs:{id:"_6-2-6-寄生构造函数模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-6-寄生构造函数模式"}},[_._v("#")]),_._v(" 6.2.6 寄生构造函数模式")]),_._v(" "),t("ul",[t("li",[_._v("工厂模式创建")]),_._v(" "),t("li",[_._v("new 对象")]),_._v(" "),t("li",[_._v("返回的对象与构造函数或者与构造函数的原型属性之间没有关系。")])]),_._v(" "),t("h3",{attrs:{id:"_6-2-7-稳妥构造函数模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-7-稳妥构造函数模式"}},[_._v("#")]),_._v(" 6.2.7 稳妥构造函数模式")]),_._v(" "),t("blockquote",[t("p",[_._v("稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。")])]),_._v(" "),t("ul",[t("li",[_._v("稳妥构造函数遵循与寄生构造函数类似的模式，但有两点不同：一是新创建对象的实例方法不引用 this；二是不使用 new 操作符调用构造函数。")]),_._v(" "),t("li",[_._v("稳妥构造函数模式提供的这种安全性，使得它非常适合在某些安全执行环境。")])]),_._v(" "),t("h2",{attrs:{id:"_6-3-继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-继承"}},[_._v("#")]),_._v(" 6.3 继承")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMAScript 只支持实现继承，而且其实现继承主要是依靠原型链来实现的。")])]),_._v(" "),t("h3",{attrs:{id:"_6-3-1-原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-原型链"}},[_._v("#")]),_._v(" 6.3.1 原型链")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("将原型链作为实现继承的主要方法，基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。")])]),_._v(" "),t("li",[t("p",[_._v("确定原型和实例之间的关系")]),_._v(" "),t("ul",[t("li",[_._v("instanceof 操作符")]),_._v(" "),t("li",[_._v("isPrototypeOf()方法")])])]),_._v(" "),t("li",[t("p",[_._v("原型链的问题")]),_._v(" "),t("ul",[t("li",[_._v("包含引用类型值的原型。")]),_._v(" "),t("li",[_._v("在创建子类型的实例时，不能向超类型的构造函数中传递参数。")])])])]),_._v(" "),t("h3",{attrs:{id:"_6-3-2-借用构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-借用构造函数"}},[_._v("#")]),_._v(" 6.3.2 借用构造函数")]),_._v(" "),t("ul",[t("li",[_._v("在子类型构造函数的内部调用超类型构造函数。")]),_._v(" "),t("li",[_._v("优点：可以在子类型构造函数中向超类型构造函数传递参数。")]),_._v(" "),t("li",[_._v("问题：函数复用就无从谈起。")])]),_._v(" "),t("h3",{attrs:{id:"_6-3-3-组合继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-3-组合继承"}},[_._v("#")]),_._v(" 6.3.3 组合继承")]),_._v(" "),t("ul",[t("li",[_._v("将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。")]),_._v(" "),t("li",[_._v("其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。")])]),_._v(" "),t("h3",{attrs:{id:"_6-3-4-原型式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-4-原型式继承"}},[_._v("#")]),_._v(" 6.3.4 原型式继承")]),_._v(" "),t("ul",[t("li",[_._v("可以在不必预先定义构造函数的情况下实现继承，其本质是执行对给定对象的浅复制。而复制得到的副本还可以得到进一步改造。")])]),_._v(" "),t("h3",{attrs:{id:"_6-3-5-寄生式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-5-寄生式继承"}},[_._v("#")]),_._v(" 6.3.5 寄生式继承")]),_._v(" "),t("ul",[t("li",[_._v("与原型式继承非常相似，也是基于某个对象或某些信息创建一个对象，然后增强对象，最后返回对象。为了解决组合继承模式由于多次调用超类型构造函数而导致的低效率问题，可以将这个模式与组合继承一起使用。")])]),_._v(" "),t("h3",{attrs:{id:"_6-3-6-寄生组合式继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-6-寄生组合式继承"}},[_._v("#")]),_._v(" 6.3.6 寄生组合式继承")]),_._v(" "),t("ul",[t("li",[_._v("集寄生式继承和组合继承的优点与一身，是实现基于类型继承的最有效方式。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);