(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{636:function(_,v,t){"use strict";t.r(v);var i=t(5),l=Object(i.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"第-3-章-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第-3-章-基本概念"}},[_._v("#")]),_._v(" 第 3 章_基本概念")]),_._v(" "),t("h2",{attrs:{id:"_3-1-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-语法"}},[_._v("#")]),_._v(" 3.1 语法")]),_._v(" "),t("h3",{attrs:{id:"_3-1-1-区分大小写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-区分大小写"}},[_._v("#")]),_._v(" 3.1.1 区分大小写")]),_._v(" "),t("ul",[t("li",[_._v("ECMAScript 中的一切（变量、函数名和操作符）都区分大小写。")])]),_._v(" "),t("h3",{attrs:{id:"_3-1-2-标识符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-标识符"}},[_._v("#")]),_._v(" 3.1.2 标识符")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("标识符")]),_._v("，就是指变量、函数、属性的名字，或者函数的参数。")])]),_._v(" "),t("p",[t("strong",[_._v("规则")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("第一个字符必须是一个字母、下划线（_）或一个美元符号（$）；")]),_._v(" "),t("li",[_._v("其他字符可以是字母、下划线、美元符号或数字。")])]),_._v(" "),t("p",[t("strong",[_._v("其他规范")]),_._v("：")]),_._v(" "),t("ul",[t("li",[t("p",[t("em",[_._v("标识符中的字母也可以包含扩展的 ASCII 或 Unicode 字母字符，但不推荐这样做。")])])]),_._v(" "),t("li",[t("p",[_._v("按照惯例，ECMAScript 标识符采用驼峰大小写格式。")])]),_._v(" "),t("li",[t("p",[_._v("不能把关键字、保留字、true、false 和 null 用作标识符。")])])]),_._v(" "),t("h3",{attrs:{id:"_3-1-3-注释"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-注释"}},[_._v("#")]),_._v(" 3.1.3 注释")]),_._v(" "),t("ul",[t("li",[_._v("单行注释：//")]),_._v(" "),t("li",[_._v("块级注释：/* */ ，中间各行通常以一个星号开头，但这不是必需的。")])]),_._v(" "),t("h3",{attrs:{id:"_3-1-4-严格模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-严格模式"}},[_._v("#")]),_._v(" 3.1.4 严格模式")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("严格模式")]),_._v("是为 JavaScript 定义了一种不同的解析与执行模型。")])]),_._v(" "),t("p",[t("strong",[_._v("使用")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v('要在整个脚本中启用严格模式，可以在顶部添加代码："use strict"。它是一个编译指示（pragma），用于告诉支持的 JavaScript 引擎切换到严格模式。')]),_._v(" "),t("li",[_._v("严格模式下，JavaScript 的执行结果会有很大不同。")]),_._v(" "),t("li",[_._v("支持严格模式的浏览器包括 IE10+、Firefox 4+、Safari 5.1+、Opera 12+ 和 Chrome。")])]),_._v(" "),t("h3",{attrs:{id:"_3-1-5-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-语句"}},[_._v("#")]),_._v(" 3.1.5 语句")]),_._v(" "),t("ul",[t("li",[_._v("ECMAScript 中的语句以一个分号结尾；如果省略分号，则由解析器确定语句的结尾。虽然分号不是必需的，但建议任何时候都不要省略它。")]),_._v(" "),t("li",[_._v("把多条语句组合到一个代码块中 {} 。")])]),_._v(" "),t("h2",{attrs:{id:"_3-2-关键字和保留字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-关键字和保留字"}},[_._v("#")]),_._v(" 3.2 关键字和保留字")]),_._v(" "),t("blockquote",[t("p",[t("strong",[_._v("关键字")]),_._v("可用于表示控制语句的开始或结束，或者用于执行特定操作等。")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("break      do        instanceof     typeof\ncase       else      new            var\ncatch      finally   return         void\ncontinue   for       switch         while\ndebugger*  function  this           with\ndefault    if        throw\ndelete     in        try\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br")])]),t("blockquote",[t("p",[_._v("尽管"),t("strong",[_._v("保留字")]),_._v("在这门语言中还没有任何特定的用途，但它们有可能在将来被用作关键字。")])]),_._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("abstract    enum          int          short\nboolean     export        interface    static\nbyte        extends       long         super\nchar        final         native       synchronized\nclass       float         package      throws\nconst       goto          private      transient\ndebugger    implements    protected    volatile\ndouble      import        public\n")])]),_._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[_._v("1")]),t("br"),t("span",{staticClass:"line-number"},[_._v("2")]),t("br"),t("span",{staticClass:"line-number"},[_._v("3")]),t("br"),t("span",{staticClass:"line-number"},[_._v("4")]),t("br"),t("span",{staticClass:"line-number"},[_._v("5")]),t("br"),t("span",{staticClass:"line-number"},[_._v("6")]),t("br"),t("span",{staticClass:"line-number"},[_._v("7")]),t("br"),t("span",{staticClass:"line-number"},[_._v("8")]),t("br")])]),t("h2",{attrs:{id:"_3-3-变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-变量"}},[_._v("#")]),_._v(" 3.3 变量")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMAScript 的变量是松散类型的，所谓松散类型就是可以用来保存任何类型的数据。每个变量仅仅是一个用于保存值的占位符而已。")])]),_._v(" "),t("ul",[t("li",[_._v("定义变量：var 标识符 。")]),_._v(" "),t("li",[_._v("未经过初始化的变量，会保存一个特殊的值——undefined。")]),_._v(" "),t("li",[_._v("初始化变量并不会把它标记为某种类型，初始化的过程就是给变量赋一个值。因此，可以在修改变量值的同时修改值的类型（有效但不推荐）。")]),_._v(" "),t("li",[_._v("用 var 操作符定义的变量将成为定义该变量的作用域中的局部变量。省略 var 操作符，创建的是全局变量。")]),_._v(" "),t("li",[_._v("可以使用一条语句定义多个变量。")])]),_._v(" "),t("h2",{attrs:{id:"_3-4-数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-数据类型"}},[_._v("#")]),_._v(" 3.4 数据类型")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）："),t("code",[_._v("Undefined")]),_._v("、"),t("code",[_._v("Null")]),_._v("、"),t("code",[_._v("Boolean")]),_._v("、"),t("code",[_._v("Number")]),_._v("和"),t("code",[_._v("String")]),_._v("。还有 1 种复杂数据类型："),t("code",[_._v("Object")]),_._v("。")])]),_._v(" "),t("h3",{attrs:{id:"_3-4-1-typeof-操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-typeof-操作符"}},[_._v("#")]),_._v(" 3.4.1 typeof 操作符")]),_._v(" "),t("blockquote",[t("p",[_._v("鉴于 ECMAScript 是松散类型的，因此需要有一种手段来检测给定变量的数据类型。")])]),_._v(" "),t("p",[_._v("使用 typeof 操作符可能返回下列某个字符串：")]),_._v(" "),t("ul",[t("li",[_._v('"undefined"——如果这个值未定义；')]),_._v(" "),t("li",[_._v('"boolean"——如果这个值是布尔值；')]),_._v(" "),t("li",[_._v('"number"——如果这个值是数值；')]),_._v(" "),t("li",[_._v('"string"——如果这个值是字符串；')]),_._v(" "),t("li",[_._v('"object"——如果这个值是对象或'),t("strong",[_._v("null")]),_._v("； // 因为特殊值 null 被认为是一个空的对象引用")]),_._v(" "),t("li",[_._v('"function"——如果这个值是函数。')])]),_._v(" "),t("p",[_._v("typeof 是一个操作符而不是函数。")]),_._v(" "),t("h3",{attrs:{id:"_3-4-2-undefined-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-undefined-类型"}},[_._v("#")]),_._v(" 3.4.2 Undefined 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("Undefined 类型只有一个值，即特殊的"),t("code",[_._v("undefined")]),_._v("。")])]),_._v(" "),t("ul",[t("li",[_._v("使用 var 声明变量但未对其加以初始化时，这个变量的值就是 undefined。")]),_._v(" "),t("li",[_._v("对未初始化的变量执行 typeof 操作符会返回 undefined 值。")])]),_._v(" "),t("h3",{attrs:{id:"_3-4-3-null-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-null-类型"}},[_._v("#")]),_._v(" 3.4.3 Null 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("Null 类型只有一个值，即特殊的"),t("code",[_._v("null")]),_._v("。")])]),_._v(" "),t("ul",[t("li",[_._v('null 值表示一个空对象指针，因此，使用 typeof 操作符检测 null 值时会返回"object"。')]),_._v(" "),t("li",[_._v("undefined 值是派生自 null 值，因此，null == undefined //true")]),_._v(" "),t("li",[_._v("无论在什么情况下都没有必要把一个变量的值显式地设置为 undefined ，但是，只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。")])]),_._v(" "),t("h3",{attrs:{id:"_3-4-4-boolean-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-4-boolean-类型"}},[_._v("#")]),_._v(" 3.4.4 Boolean 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("Boolean 类型只有两个字面值："),t("code",[_._v("true")]),_._v(" 和"),t("code",[_._v("false")]),_._v("。 // 注意是小写")])]),_._v(" "),t("ul",[t("li",[_._v("可以对任何数据类型的值调用"),t("code",[_._v("Boolean()")]),_._v("函数，返回一个 Boolean 值。")])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("数据类型")]),_._v(" "),t("th",[_._v("转换为 true 的值")]),_._v(" "),t("th",[_._v("转换为 false 的值")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("Boolean")]),_._v(" "),t("td",[_._v("true")]),_._v(" "),t("td",[_._v("false")])]),_._v(" "),t("tr",[t("td",[_._v("String")]),_._v(" "),t("td",[_._v("任何非空字符串")]),_._v(" "),t("td",[_._v('""（空字符串）')])]),_._v(" "),t("tr",[t("td",[_._v("Number")]),_._v(" "),t("td",[_._v("任何非零数字值（包括无穷大）")]),_._v(" "),t("td",[_._v("0 和 NaN")])]),_._v(" "),t("tr",[t("td",[_._v("Object")]),_._v(" "),t("td",[_._v("任何对象（包括空对象）")]),_._v(" "),t("td",[_._v("null")])]),_._v(" "),t("tr",[t("td",[_._v("Undefined")]),_._v(" "),t("td",[t("em",[_._v("不适用")])]),_._v(" "),t("td",[_._v("undefined")])])])]),_._v(" "),t("ul",[t("li",[_._v("流控制语句（如 if 语句）自动执行相应的 Boolean 转换")])]),_._v(" "),t("h3",{attrs:{id:"_3-4-5-number-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-5-number-类型"}},[_._v("#")]),_._v(" 3.4.5 Number 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("Number 类型型使用 IEEE754 格式来表示整数和浮点数值。")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("整数")]),_._v(" "),t("ul",[t("li",[_._v("十进制\n"),t("ul",[t("li",[_._v("var intNum = 55; // 整数")])])]),_._v(" "),t("li",[_._v("八进制字面值的第一位必须是零（0），然后是八进制数字序列（0 ～ 7）。如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析。\n"),t("ul",[t("li",[_._v("var octalNum1 = 070; // 八进制的 56")]),_._v(" "),t("li",[_._v("var octalNum2 = 079; // 无效的八进制数值——解析为 79")])])]),_._v(" "),t("li",[_._v("十六进制字面值的前两位必须是 0x，后跟任何十六进制数字（0 ～ 9 及 A ～ F 或 a-f）\n"),t("ul",[t("li",[_._v("var hexNum2 = 0x1f; // 十六进制的 31")])])]),_._v(" "),t("li",[_._v("在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。")])])]),_._v(" "),t("li",[t("p",[_._v("浮点数")]),_._v(" "),t("ul",[t("li",[_._v("所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。\n"),t("ul",[t("li",[_._v("var floatNum3 = .1; // 有效，但不推荐")])])]),_._v(" "),t("li",[_._v("由于保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值转换为整数值。\n"),t("ul",[t("li",[_._v("var floatNum1 = 1.; // 小数点后面没有数字——解析为 1")]),_._v(" "),t("li",[_._v("var floatNum2 = 10.0; // 整数——解析为 10")])])]),_._v(" "),t("li",[_._v("对于那些极大或极小的数值，可以用 e 表示法（即科学计数法）表示的浮点数值表示。\n"),t("ul",[t("li",[_._v("var floatNum = 3.125e7; // 等于 31250000")])])]),_._v(" "),t("li",[_._v("浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数。\n"),t("ul",[t("li",[_._v("0.1 加 0.2 的结果不是 0.3，而是 0.30000000000000004，因为使用基于 IEEE754 数值的浮点计算会产生舍入误差的问题。因此，永远不要测试某个特定的浮点数值。")])])])])]),_._v(" "),t("li",[t("p",[_._v("数值范围")]),_._v(" "),t("ul",[t("li",[_._v("最小数值保存在"),t("code",[_._v("Number.MIN_VALUE")]),_._v("中——在大多数浏览器中，这个值是 5e-324。")]),_._v(" "),t("li",[_._v("最大数值保存在"),t("code",[_._v("Number.MAX_VALUE")]),_._v("中——在大多数浏览器中，这个值是 1.7976931348623157e+308。")]),_._v(" "),t("li",[_._v("如果某次计算的结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。该值无法继续参与下一次的计算。")]),_._v(" "),t("li",[_._v("使用"),t("code",[_._v("isFinite()")]),_._v("函数，确定一个数值是不是有穷的。")])])]),_._v(" "),t("li",[t("p",[_._v("NaN")]),_._v(" "),t("ul",[t("li",[_._v("非数值（Not a Number）是一个特殊的数值，用于表示一个本来要返回数值的操作数未返回数值的情况（这样就不会抛出错误了）。\n"),t("ul",[t("li",[_._v("例如，在其他编程语言中，任何数值除以 0 都会导致错误，从而停止代码执行。但在 ECMAScript 中，任何数值除以 0 会返回 NaN，因此不会影响其他代码的执行。")])])]),_._v(" "),t("li",[_._v("特点：\n"),t("ul",[t("li",[_._v("任何涉及 NaN 的操作（例如 NaN/10）都会返回 NaN。")]),_._v(" "),t("li",[_._v("NaN 与任何值都不相等，包括 NaN 本身。")])])]),_._v(" "),t("li",[t("code",[_._v("isNaN()")]),_._v("函数：\n"),t("ul",[t("li",[_._v("确定这个参数是否“不是数值”，接受一个参数，该参数可以是任何类型。")]),_._v(" "),t("li",[_._v("isNaN() 在接收到一个值之后，会尝试将这个值转换为数值。\n"),t("ul",[t("li",[_._v('alert(isNaN("10")); //false（可以被转换成数值 10）')]),_._v(" "),t("li",[_._v("alert(isNaN(true)); //false（可以被转换成数值 1）")])])]),_._v(" "),t("li",[_._v("在基于对象调用 isNaN() 函数时，会首先调用对象的 valueOf() 方法，然后确定该方法返回的值是否可以转换为数值。如果不能，则基于这个返回值再调用 toString()方法，再测试返回值。")])])])])]),_._v(" "),t("li",[t("p",[_._v("数值转换")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("Number()")]),_._v("函数\n"),t("ul",[t("li",[t("em",[_._v("用于任何数据类型")])]),_._v(" "),t("li",[_._v("如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。")]),_._v(" "),t("li",[_._v("如果是数字值，只是简单的传入和返回。")]),_._v(" "),t("li",[_._v("如果是 null 值，返回 0。")]),_._v(" "),t("li",[_._v("如果是 undefined，返回 NaN。")]),_._v(" "),t("li",[_._v("如果是字符串\n"),t("ul",[t("li",[_._v("如果字符串中只包含数字（包括前面带正号或负号的情况），则将其转换为十进制数值。会忽略前导零。")]),_._v(" "),t("li",[_._v("如果字符串中包含有效的浮点格式，则将其转换为对应的浮点数值。会忽略前导零。")]),_._v(" "),t("li",[_._v("如果字符串中包含有效的十六进制格式，则将其转换为相同大小的十进制整数值；")]),_._v(" "),t("li",[_._v("如果字符串是空的（不包含任何字符），则将其转换为 0；")]),_._v(" "),t("li",[_._v("如果字符串中包含除上述格式之外的字符，则将其转换为 NaN。")])])]),_._v(" "),t("li",[_._v("如果是对象，则调用对象的 valueOf() 方法，然后依照前面的规则转换返回的值。如果转换的结果是 NaN，则调用对象的 toString() 方法，然后再次依照前面的规则转换返回的字符串值。")])])]),_._v(" "),t("li",[t("code",[_._v("parseInt()")]),_._v("函数\n"),t("ul",[t("li",[t("em",[_._v("专门用于把字符串转换成数值")])]),_._v(" "),t("li",[_._v("它会忽略字符串前面的空格，直至找到第一个非空格字符。\n"),t("ul",[t("li",[_._v("如果第一个字符不是数字字符（小数点并不是有效的数字字符）或者负号，parseInt() 就会返回 NaN。用 parseInt() 转换空字符串会返回 NaN。")]),_._v(" "),t("li",[_._v("如果第一个字符是数字字符，parseInt() 会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。")])])]),_._v(" "),t("li",[_._v("可以为这个函数提供第二个参数：转换时使用的基数（即多少进制）。")])])]),_._v(" "),t("li",[t("code",[_._v("parseFloat()")]),_._v("函数\n"),t("ul",[t("li",[t("em",[_._v("专门用于把字符串转换成数值")])]),_._v(" "),t("li",[_._v("字符串中的第一个小数点是有效的，而第二个小数点就是无效的了，因此它后面的字符串将被忽略。")]),_._v(" "),t("li",[_._v("parseFloat() 只解析十进制值。十六进制格式的字符串则始终会被转换成 0。")]),_._v(" "),t("li",[_._v("如果字符串包含的是一个可解析为整数的数（没有小数点，或者小数点后都是零），parseFloat() 会返回整数。")])])])])])]),_._v(" "),t("h3",{attrs:{id:"_3-4-6-string-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-6-string-类型"}},[_._v("#")]),_._v(" 3.4.6 String 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列，即字符串。可用单引号或双引号表示。")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("字符字面量")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("String 数据类型包含一些特殊的字符字面量，也叫转义序列，用于表示非打印字符，或者具有其他用途的字符。")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("字面量")]),_._v(" "),t("th",[_._v("含义")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("\\n")]),_._v(" "),t("td",[_._v("换行")])]),_._v(" "),t("tr",[t("td",[_._v("\\t")]),_._v(" "),t("td",[_._v("制表")])]),_._v(" "),t("tr",[t("td",[_._v("\\b")]),_._v(" "),t("td",[_._v("空格")])]),_._v(" "),t("tr",[t("td",[_._v("\\r")]),_._v(" "),t("td",[_._v("回车")])]),_._v(" "),t("tr",[t("td",[_._v("\\f")]),_._v(" "),t("td",[_._v("进纸")])]),_._v(" "),t("tr",[t("td",[_._v("\\")]),_._v(" "),t("td",[_._v("斜杠")])]),_._v(" "),t("tr",[t("td",[_._v("'")]),_._v(" "),t("td",[_._v("单引号（'）")])]),_._v(" "),t("tr",[t("td",[_._v('"')]),_._v(" "),t("td",[_._v('双引号（"）')])]),_._v(" "),t("tr",[t("td",[_._v("\\xnn")]),_._v(" "),t("td",[_._v('以十六进制代码 nn 表示的一个字符（其中 n 为 0 ～ F）。例如，\\x41 表示"A"')])]),_._v(" "),t("tr",[t("td",[_._v("\\unnnn")]),_._v(" "),t("td",[_._v("以十六进制代码 nnnn 表示的一个 Unicode 字符（其中 n 为 0 ～ F）。例如，\\u03a3 表示希腊字符 Σ")])])])]),_._v(" "),t("ul",[t("li",[_._v("这些字符字面量可以出现在字符串中的任意位置，而且也将被作为一个字符来解析")])])])])]),_._v(" "),t("li",[t("p",[_._v("字符串的特点")]),_._v(" "),t("ul",[t("li",[_._v("ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含新值的字符串填充该变量。")])])]),_._v(" "),t("li",[t("p",[_._v("转换为字符串")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("toString()")]),_._v("方法\n"),t("ul",[t("li",[_._v("返回相应值的字符串表现。")]),_._v(" "),t("li",[_._v("数值、布尔值、对象和字符串值都有 toString()方法。但 null 和 undefined 值没有这个方法。")]),_._v(" "),t("li",[_._v("可以传递一个参数：输出数值的基数。")])])]),_._v(" "),t("li",[t("code",[_._v("String()")]),_._v("函数\n"),t("ul",[t("li",[_._v("能够将任何类型的值转换为字符串。")]),_._v(" "),t("li",[_._v("如果值有 toString() 方法，则调用该方法（没有参数）并返回相应的结果；")]),_._v(" "),t("li",[_._v('如果值是 null，则返回"null"；')]),_._v(" "),t("li",[_._v('如果值是 undefined，则返回"undefined"。')])])]),_._v(" "),t("li",[_._v('要把某个值转换为字符串，可以使用加号操作符把它与一个字符串（""）加在一起。')])])])]),_._v(" "),t("h3",{attrs:{id:"_3-4-7-object-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-7-object-类型"}},[_._v("#")]),_._v(" 3.4.7 Object 类型")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMAScript 中的对象其实就是一组数据和功能的集合。")])]),_._v(" "),t("ul",[t("li",[t("p",[_._v("对象可以通过执行 new 操作符后跟要创建的对象类型的名称来创建。")])]),_._v(" "),t("li",[t("p",[_._v("Object 类型是所有它的实例的基础。换句话说，Object 类型所具有的任何属性和方法也同样存在于更具体的对象中。")]),_._v(" "),t("ul",[t("li",[_._v("constructor：保存着用于创建当前对象的函数。")]),_._v(" "),t("li",[_._v("hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。")]),_._v(" "),t("li",[_._v("isPrototypeOf(object)：用于检查传入的对象是否是传入对象的原型。")]),_._v(" "),t("li",[_._v("propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用 for-in 语句。")]),_._v(" "),t("li",[_._v("toLocaleString()：返回对象的字符串表示，该字符串与执行环境的地区对应。")]),_._v(" "),t("li",[_._v("toString()：返回对象的字符串表示。")]),_._v(" "),t("li",[_._v("valueOf()：返回对象的字符串、数值或布尔值表示。通常与 toString()方法的返回值相同。")])])])]),_._v(" "),t("h2",{attrs:{id:"_3-5-操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-操作符"}},[_._v("#")]),_._v(" 3.5 操作符")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMAScript 操作符的与众不同之处在于，它们能够适用于很多值，例如字符串、数字值、布尔值，甚至对象。")])]),_._v(" "),t("h3",{attrs:{id:"_3-5-1-一元操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-一元操作符"}},[_._v("#")]),_._v(" 3.5.1 一元操作符")]),_._v(" "),t("blockquote",[t("p",[_._v("只能操作一个值的操作符叫做一元操作符。")])]),_._v(" "),t("ul",[t("li",[_._v("递增（++）和递减操作符（--），分为前置型和后置型。")]),_._v(" "),t("li",[_._v("一元加（+）和减（-）操作符")])]),_._v(" "),t("h3",{attrs:{id:"_3-5-2-位操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-位操作符"}},[_._v("#")]),_._v(" 3.5.2 位操作符")]),_._v(" "),t("blockquote",[t("p",[_._v("位操作符用于在最基本的层次上，即按内存中表示数值的位来操作数值。")])]),_._v(" "),t("ul",[t("li",[_._v("按位非（NOT）（~） // 返回数值的反码")]),_._v(" "),t("li",[_._v("按位与（AND）（&） // 只在两个数值的对应位都是 1 时才返回 1")]),_._v(" "),t("li",[_._v("按位或（OR） （|） // 有一个位是 1 的情况下就返回 1")]),_._v(" "),t("li",[_._v("按位异或（XOR） （^） // 两个数值对应位上只有一个 1 时才返回 1")]),_._v(" "),t("li",[_._v("左移 （ << ）\n"),t("ul",[t("li",[_._v("以 0 来填充空位。")]),_._v(" "),t("li",[_._v("左移不会影响操作数的符号位。换句话说，如果将 -2 向左移动 5 位，结果将是 -64，而非 64。")])])]),_._v(" "),t("li",[_._v("有符号的右移 （>>）\n"),t("ul",[t("li",[_._v("用符号位的值来填充所有空位。")])])]),_._v(" "),t("li",[_._v("无符号右移 （>>>）\n"),t("ul",[t("li",[_._v("以 0 来填充空位。")]),_._v(" "),t("li",[_._v("无符号右移操作符会把负数的二进制码当成正数的二进制码。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-3-布尔操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-布尔操作符"}},[_._v("#")]),_._v(" 3.5.3 布尔操作符")]),_._v(" "),t("ul",[t("li",[_._v("逻辑非 （！）\n"),t("ul",[t("li",[_._v("首先会将它的操作数转换为一个布尔值，然后再对其求反。")]),_._v(" "),t("li",[_._v("同时使用两个逻辑非操作符，实际上就会模拟 Boolean() 转型函数的行为。")])])]),_._v(" "),t("li",[_._v("逻辑与 （&&）\n"),t("ul",[t("li",[_._v("属于"),t("strong",[_._v("短路操作")]),_._v("，即如果第一个操作数能够决定结果，那么就不会再对第二个操作数求值。")])])]),_._v(" "),t("li",[_._v("逻辑或 （||）\n"),t("ul",[t("li",[_._v("属于"),t("strong",[_._v("短路操作")])])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-4-乘性操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-乘性操作符"}},[_._v("#")]),_._v(" 3.5.4 乘性操作符")]),_._v(" "),t("ul",[t("li",[_._v("乘法 （*）\n"),t("ul",[t("li",[_._v("如果操作数都是数值，执行常规的乘法计算。")]),_._v(" "),t("li",[_._v("如果有一个操作数是 NaN，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是 Infinity 与 0 相乘，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是 Infinity 与非 0 数值相乘，则结果是 Infinity 或 -Infinity，取决于有符号操作数的符号；")]),_._v(" "),t("li",[_._v("如果是 Infinity 与 Infinity 相乘，则结果是 Infinity。")]),_._v(" "),t("li",[_._v("如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则。")])])]),_._v(" "),t("li",[_._v("除法 （/）\n"),t("ul",[t("li",[_._v("如果操作数都是数值，执行常规的除法计算。")]),_._v(" "),t("li",[_._v("如果有一个操作数是 NaN，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是 Infinity 被 Infinity 除，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是零被零除，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是非零的有限数被零除，则结果是 Infinity 或 -Infinity，取决于有符号操作数的符号。")]),_._v(" "),t("li",[_._v("如果是 Infinity 被任何非零数值除，则结果是 Infinity 或 -Infinity，取决于有符号操作数的符号。")]),_._v(" "),t("li",[_._v("如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则。")])])]),_._v(" "),t("li",[_._v("求模 （%）\n"),t("ul",[t("li",[_._v("如果操作数都是数值，执行常规的除法计算，返回除得的余数。")]),_._v(" "),t("li",[_._v("如果被除数是无穷大值而除数是有限大的数值，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果被除数是有限大的数值而除数是零，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果是 Infinity 被 Infinity 除，则结果是 NaN。")]),_._v(" "),t("li",[_._v("如果被除数是有限大的数值而除数是无穷大的数值，则结果是被除数。")]),_._v(" "),t("li",[_._v("如果被除数是零，则结果是零。")]),_._v(" "),t("li",[_._v("如果有一个操作数不是数值，则在后台调用 Number() 将其转换为数值，然后再应用上面的规则。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-5-加性操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-5-加性操作符"}},[_._v("#")]),_._v(" 3.5.5 加性操作符")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("加法 （+）")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("如果两个操作符都是数值，执行常规的加法计算。")]),_._v(" "),t("ul",[t("li",[_._v("如果有一个操作数是 NaN，则结果是 NaN")]),_._v(" "),t("li",[_._v("如果是 Infinity 加 Infinity，则结果是 Infinity")]),_._v(" "),t("li",[_._v("如果是 -Infinity 加 -Infinity，则结果是 -Infinity")]),_._v(" "),t("li",[_._v("如果是 Infinity 加 -Infinity，则结果是 NaN")]),_._v(" "),t("li",[_._v("如果是 +0 加 +0，则结果是 +0")]),_._v(" "),t("li",[_._v("如果是 -0 加 -0，则结果是 -0")]),_._v(" "),t("li",[_._v("如果是 +0 加 -0，则结果是 +0")])])]),_._v(" "),t("li",[t("p",[_._v("如果有一个操作数是字符串。")]),_._v(" "),t("ul",[t("li",[_._v("如果两个操作数都是字符串，则将第二个操作数与第一个操作数拼接起来")]),_._v(" "),t("li",[_._v("如果只有一个操作数是字符串，则将另一个操作数转换为字符串，然后再将两个字符串拼接起来")])])]),_._v(" "),t("li",[t("p",[_._v("如果有一个操作数是对象、数值或布尔值，则调用它们的 toString() 方法取得相应的字符串值，然后再应用前面关于字符串的规则。")])]),_._v(" "),t("li",[t("p",[_._v('对于 undefined 和 null，则分别调用 String() 函数并取得字符串"undefined"和"null"。')])])])]),_._v(" "),t("li",[t("p",[_._v("减法 （-）")]),_._v(" "),t("ul",[t("li",[_._v("如果两个操作符都是数值，则执行常规的算术减法操作。\n"),t("ul",[t("li",[_._v("如果有一个操作数是 NaN，则结果是 NaN")]),_._v(" "),t("li",[_._v("如果是 Infinity 减 Infinity，则结果是 NaN")]),_._v(" "),t("li",[_._v("如果是 -Infinity 减 -Infinity，则结果是 NaN")]),_._v(" "),t("li",[_._v("如果是 Infinity 减 -Infinity，则结果是 Infinity")]),_._v(" "),t("li",[_._v("如果是 -Infinity 减 Infinity，则结果是 -Infinity")]),_._v(" "),t("li",[_._v("如果是 +0 减 +0，则结果是 +0")]),_._v(" "),t("li",[_._v("如果是 +0 减 -0，则结果是 -0")]),_._v(" "),t("li",[_._v("如果是 -0 减 -0，则结果是 +0")])])]),_._v(" "),t("li",[_._v("如果有一个操作数是字符串、布尔值、null 或 undefined，则先在后台调用 Number() 函数将其转换为数值，然后再根据前面的规则执行减法计算。如果转换的结果是 NaN，则减法的结果就是 NaN。")]),_._v(" "),t("li",[_._v("如果有一个操作数是对象，则调用对象的 valueOf() 方法以取得表示该对象的数值。如果得到的值是 NaN，则减法的结果就是 NaN。如果对象没有 valueOf() 方法，则调用其 toString() 方法并将得到的字符串转换为数值。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-6-关系操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-6-关系操作符"}},[_._v("#")]),_._v(" 3.5.6 关系操作符")]),_._v(" "),t("ul",[t("li",[_._v("小于（<）")]),_._v(" "),t("li",[_._v("大于（>）")]),_._v(" "),t("li",[_._v("小于等于（<=）")]),_._v(" "),t("li",[_._v("大于等于（>=）\n"),t("ul",[t("li",[_._v("如果两个操作数都是数值，则执行数值比较。\n"),t("ul",[t("li",[_._v("任何操作数与 NaN 进行关系比较，结果都是 false")])])]),_._v(" "),t("li",[_._v("如果两个操作数都是字符串，则比较两个字符串对应的字符编码值。")]),_._v(" "),t("li",[_._v("如果一个操作数是数值，则将另一个操作数转换为一个数值，然后执行数值比较。")]),_._v(" "),t("li",[_._v("如果一个操作数是布尔值，则先将其转换为数值，然后再执行比较。")]),_._v(" "),t("li",[_._v("如果一个操作数是对象，则调用这个对象的 valueOf() 方法，用得到的结果按照前面的规则执行比较。如果对象没有 valueOf()方法，则调用 toString()方法，并用得到的结果根据前面的规则执行比较。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-7-相等操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-7-相等操作符"}},[_._v("#")]),_._v(" 3.5.7 相等操作符")]),_._v(" "),t("ul",[t("li",[_._v("相等（==）和不相等（!=）\n"),t("ul",[t("li",[_._v("先转换\n"),t("ul",[t("li",[_._v("如果有一个操作数是布尔值，则先将其转换为数值")]),_._v(" "),t("li",[_._v("如果一个操作数是字符串，另一个操作数是数值，先将字符串转换为数值")]),_._v(" "),t("li",[_._v("如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf() 方法，用得到的基本类型值按照前面的规则进行比较")]),_._v(" "),t("li",[_._v("不能将 null 和 undefined 转换成其他任何值。")])])]),_._v(" "),t("li",[_._v("再比较\n"),t("ul",[t("li",[_._v("null 和 undefined 是相等的")]),_._v(" "),t("li",[_._v("如果有一个操作数是 NaN，则相等操作符返回 false，而不相等操作符返回 true")]),_._v(" "),t("li",[_._v("如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 true")])])])])]),_._v(" "),t("li",[_._v("全等（===）和不全等（!==）\n"),t("ul",[t("li",[_._v("仅比较而不转换")]),_._v(" "),t("li",[_._v("null === undefined 会返回 false，因为它们是不同类型的值。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-8-条件操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-8-条件操作符"}},[_._v("#")]),_._v(" 3.5.8 条件操作符")]),_._v(" "),t("ul",[t("li",[_._v("（xxx ? a : b）")])]),_._v(" "),t("h3",{attrs:{id:"_3-5-9-赋值操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-9-赋值操作符"}},[_._v("#")]),_._v(" 3.5.9 赋值操作符")]),_._v(" "),t("ul",[t("li",[_._v("简单的赋值操作符（=）")]),_._v(" "),t("li",[_._v("复合赋值操作符\n"),t("ul",[t("li",[_._v("乘/赋值（*=）")]),_._v(" "),t("li",[_._v("除/赋值（/=）；")]),_._v(" "),t("li",[_._v("模/赋值（%=）；")]),_._v(" "),t("li",[_._v("加/赋值（+=）；")]),_._v(" "),t("li",[_._v("减/赋值（-=）；")]),_._v(" "),t("li",[_._v("左移/赋值（<<=）；")]),_._v(" "),t("li",[_._v("有符号右移/赋值（>>=）；")]),_._v(" "),t("li",[_._v("无符号右移/赋值（>>>=）。")])])])]),_._v(" "),t("h3",{attrs:{id:"_3-5-10-逗号操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-10-逗号操作符"}},[_._v("#")]),_._v(" 3.5.10 逗号操作符")]),_._v(" "),t("ul",[t("li",[_._v("使用逗号操作符（,）可以在一条语句中执行多个操作。")])]),_._v(" "),t("h2",{attrs:{id:"_3-6-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-语句"}},[_._v("#")]),_._v(" 3.6 语句")]),_._v(" "),t("blockquote",[t("p",[_._v("ECMA-262 规定了一组语句（也称为流控制语句）")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-1-if-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-1-if-语句"}},[_._v("#")]),_._v(" 3.6.1 if 语句")]),_._v(" "),t("ul",[t("li",[_._v("if (condition) statement1 else statement2")]),_._v(" "),t("li",[_._v("其中的 condition（条件）可以是任意表达式；而且对这个表达式求值的结果不一定是布尔值。ECMAScript 会自动调用 Boolean() 转换函数将这个表达式的结果转换为一个布尔值。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-2-do-while-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-2-do-while-语句"}},[_._v("#")]),_._v(" 3.6.2 do-while 语句")]),_._v(" "),t("ul",[t("li",[_._v("do {\nstatement\n} while (expression);")]),_._v(" "),t("li",[_._v("在对条件表达式求值之前，循环体内的代码至少会被执行一次。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-3-while-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-3-while-语句"}},[_._v("#")]),_._v(" 3.6.3 while 语句")]),_._v(" "),t("ul",[t("li",[_._v("while(expression) statement")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-4-for-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-4-for-语句"}},[_._v("#")]),_._v(" 3.6.4 for 语句")]),_._v(" "),t("ul",[t("li",[_._v("for (initialization; expression; post-loop-expression) statement")]),_._v(" "),t("li",[_._v("for 语句中的初始化表达式、控制表达式和循环后表达式都是可选的。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-5-for-in-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-5-for-in-语句"}},[_._v("#")]),_._v(" 3.6.5 for-in 语句")]),_._v(" "),t("ul",[t("li",[_._v("for (property in expression) statement")]),_._v(" "),t("li",[_._v("是一种精准的迭代语句，可以用来枚举对象的属性。")]),_._v(" "),t("li",[_._v("当要迭代的对象的变量值为 null 或 undefined，for-in 语句会抛出错误。ECMAScript 5 更正了这一行为，对这种情况不再抛出错误，而只是不执行循环体。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-6-label-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-6-label-语句"}},[_._v("#")]),_._v(" 3.6.6 label 语句")]),_._v(" "),t("ul",[t("li",[_._v("label: statement")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-7-break-和-continue-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-7-break-和-continue-语句"}},[_._v("#")]),_._v(" 3.6.7 break 和 continue 语句")]),_._v(" "),t("ul",[t("li",[_._v("break 语句会立即退出循环，强制继续执行循环后面的语句。")]),_._v(" "),t("li",[_._v("continue 语句虽然也是立即退出循环，但退出循环后会从循环的顶部继续执行。")]),_._v(" "),t("li",[_._v("break 和 continue 语句都可以与 label 语句联合使用，从而返回代码中特定的位置。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-8-with-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-8-with-语句"}},[_._v("#")]),_._v(" 3.6.8 with 语句")]),_._v(" "),t("ul",[t("li",[_._v("with (expression) statement")]),_._v(" "),t("li",[_._v("with 语句的作用是将代码的作用域设置到一个特定的对象中。目的是为了简化多次编写同一个对象的工作。")]),_._v(" "),t("li",[_._v("严格模式下不允许使用 with 语句，否则将视为语法错误。")]),_._v(" "),t("li",[_._v("由于大量使用 with 语句会导致性能下降，同时也会给调试代码造成困难，因此在开发大型应用程序时，不建议使用 with 语句。")])]),_._v(" "),t("h3",{attrs:{id:"_3-6-9-switch-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-9-switch-语句"}},[_._v("#")]),_._v(" 3.6.9 switch 语句")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("switch (expression) {\ncase value: statement\nbreak;\ncase value: statement\nbreak;\ncase value: statement\nbreak;\ncase value: statement\nbreak;")]),_._v(" "),t("p",[_._v("default: statement\n}")])]),_._v(" "),t("li",[t("p",[_._v("如果省略 break 关键字，就会导致执行完当前 case 后，继续执行下一个 case。")])]),_._v(" "),t("li",[t("p",[_._v("可以在 switch 语句中使用任何数据类型。")])]),_._v(" "),t("li",[t("p",[_._v("每个 case 的值不一定是常量，可以是变量，甚至是表达式。")])]),_._v(" "),t("li",[t("p",[_._v("switch 语句在比较值时使用的是全等操作符。")])])]),_._v(" "),t("h2",{attrs:{id:"_3-7-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-函数"}},[_._v("#")]),_._v(" 3.7 函数")]),_._v(" "),t("ul",[t("li",[_._v("function functionName(arg0, arg1,...,argN) {\nstatements\n}")]),_._v(" "),t("li",[_._v("无须指定函数的返回值，因为任何 ECMAScript 函数都可以在任何时候返回任何值。")]),_._v(" "),t("li",[_._v("未指定返回值的函数返回的是一个特殊的 undefined 值。")])]),_._v(" "),t("h3",{attrs:{id:"_3-7-1-理解参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-1-理解参数"}},[_._v("#")]),_._v(" 3.7.1 理解参数")]),_._v(" "),t("ul",[t("li",[_._v("ECMAScript 中的参数在内部是用一个数组来表示，在函数体内可以通过"),t("code",[_._v("arguments")]),_._v("对象来访问这个参数数组，从而获取传递给函数的每一个参数。")]),_._v(" "),t("li",[_._v("arguments 对象只是与数组类似（它并不是 Array 的实例）\n"),t("ul",[t("li",[_._v("可以使用方括号语法访问它的每一个元素。")]),_._v(" "),t("li",[_._v("通过访问 arguments 对象的 length 属性可以获知有多少个参数传递给了函数。")]),_._v(" "),t("li",[_._v("arguments 对象可以与命名参数一起使用。")]),_._v(" "),t("li",[_._v("它的值永远与对应命名参数的值保持同步。")])])]),_._v(" "),t("li",[_._v("没有传递值的命名参数将自动被赋予 undefined 值。")]),_._v(" "),t("li",[_._v("ECMAScript 中的所有参数传递的都是值，不可能通过引用传递参数。")])]),_._v(" "),t("h3",{attrs:{id:"_3-7-2-没有重载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-2-没有重载"}},[_._v("#")]),_._v(" 3.7.2 没有重载")]),_._v(" "),t("ul",[t("li",[_._v("如果在 ECMAScript 中定义了两个名字相同的函数，则该名字只属于后定义的函数。")]),_._v(" "),t("li",[_._v("通过检查传入函数中参数的类型和数量并作出不同的反应，可以"),t("strong",[_._v("模仿")]),_._v("方法的重载。")])])])}),[],!1,null,null,null);v.default=l.exports}}]);